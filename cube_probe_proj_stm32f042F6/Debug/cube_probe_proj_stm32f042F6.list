
cube_probe_proj_stm32f042F6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021e4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080022a4  080022a4  000122a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080022e0  080022e0  000122e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080022e4  080022e4  000122e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080022e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000015c  20000004  080022ec  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  20000160  080022ec  00020160  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00012e96  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000250e  00000000  00000000  00032ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007934  00000000  00000000  000353d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000948  00000000  00000000  0003cd08  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d00  00000000  00000000  0003d650  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000056ea  00000000  00000000  0003e350  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003908  00000000  00000000  00043a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00047342  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001d0c  00000000  00000000  000473c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800228c 	.word	0x0800228c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	0800228c 	.word	0x0800228c

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b510      	push	{r4, lr}
 800024a:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 800024c:	f000 fee0 	bl	8001010 <HAL_RCC_GetHCLKFreq>
 8000250:	21fa      	movs	r1, #250	; 0xfa
 8000252:	0089      	lsls	r1, r1, #2
 8000254:	f7ff ff6c 	bl	8000130 <__udivsi3>
 8000258:	f000 fad2 	bl	8000800 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800025c:	2001      	movs	r0, #1
 800025e:	2200      	movs	r2, #0
 8000260:	0021      	movs	r1, r4
 8000262:	4240      	negs	r0, r0
 8000264:	f000 fa92 	bl	800078c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000268:	2000      	movs	r0, #0
 800026a:	bd10      	pop	{r4, pc}

0800026c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800026c:	2310      	movs	r3, #16
 800026e:	4a06      	ldr	r2, [pc, #24]	; (8000288 <HAL_Init+0x1c>)
{
 8000270:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000272:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000274:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000276:	430b      	orrs	r3, r1
 8000278:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800027a:	f7ff ffe5 	bl	8000248 <HAL_InitTick>
  HAL_MspInit();
 800027e:	f001 fe83 	bl	8001f88 <HAL_MspInit>
}
 8000282:	2000      	movs	r0, #0
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	40022000 	.word	0x40022000

0800028c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800028c:	4a02      	ldr	r2, [pc, #8]	; (8000298 <HAL_IncTick+0xc>)
 800028e:	6813      	ldr	r3, [r2, #0]
 8000290:	3301      	adds	r3, #1
 8000292:	6013      	str	r3, [r2, #0]
}
 8000294:	4770      	bx	lr
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	20000020 	.word	0x20000020

0800029c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800029c:	4b01      	ldr	r3, [pc, #4]	; (80002a4 <HAL_GetTick+0x8>)
 800029e:	6818      	ldr	r0, [r3, #0]
}
 80002a0:	4770      	bx	lr
 80002a2:	46c0      	nop			; (mov r8, r8)
 80002a4:	20000020 	.word	0x20000020

080002a8 <ADC_Enable>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80002a8:	2300      	movs	r3, #0
{
 80002aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002ac:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 80002ae:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002b0:	6803      	ldr	r3, [r0, #0]
{
 80002b2:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002b4:	689a      	ldr	r2, [r3, #8]
 80002b6:	400a      	ands	r2, r1
 80002b8:	2a01      	cmp	r2, #1
 80002ba:	d107      	bne.n	80002cc <ADC_Enable+0x24>
 80002bc:	6819      	ldr	r1, [r3, #0]
 80002be:	4211      	tst	r1, r2
 80002c0:	d001      	beq.n	80002c6 <ADC_Enable+0x1e>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80002c2:	2000      	movs	r0, #0
}
 80002c4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002c6:	68da      	ldr	r2, [r3, #12]
 80002c8:	0412      	lsls	r2, r2, #16
 80002ca:	d4fa      	bmi.n	80002c2 <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80002cc:	6899      	ldr	r1, [r3, #8]
 80002ce:	4a19      	ldr	r2, [pc, #100]	; (8000334 <ADC_Enable+0x8c>)
 80002d0:	4211      	tst	r1, r2
 80002d2:	d008      	beq.n	80002e6 <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002d4:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002d6:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002d8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80002da:	4313      	orrs	r3, r2
 80002dc:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002de:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80002e0:	4303      	orrs	r3, r0
 80002e2:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 80002e4:	e7ee      	b.n	80002c4 <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 80002e6:	2201      	movs	r2, #1
 80002e8:	6899      	ldr	r1, [r3, #8]
 80002ea:	430a      	orrs	r2, r1
 80002ec:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80002ee:	4b12      	ldr	r3, [pc, #72]	; (8000338 <ADC_Enable+0x90>)
 80002f0:	4912      	ldr	r1, [pc, #72]	; (800033c <ADC_Enable+0x94>)
 80002f2:	6818      	ldr	r0, [r3, #0]
 80002f4:	f7ff ff1c 	bl	8000130 <__udivsi3>
 80002f8:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 80002fa:	9b01      	ldr	r3, [sp, #4]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d115      	bne.n	800032c <ADC_Enable+0x84>
    tickstart = HAL_GetTick();
 8000300:	f7ff ffcc 	bl	800029c <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000304:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 8000306:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000308:	6823      	ldr	r3, [r4, #0]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	422b      	tst	r3, r5
 800030e:	d1d8      	bne.n	80002c2 <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000310:	f7ff ffc4 	bl	800029c <HAL_GetTick>
 8000314:	1b80      	subs	r0, r0, r6
 8000316:	2802      	cmp	r0, #2
 8000318:	d9f6      	bls.n	8000308 <ADC_Enable+0x60>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800031a:	2310      	movs	r3, #16
 800031c:	6c62      	ldr	r2, [r4, #68]	; 0x44
        return HAL_ERROR;
 800031e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000320:	4313      	orrs	r3, r2
 8000322:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000324:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000326:	432b      	orrs	r3, r5
 8000328:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800032a:	e7cb      	b.n	80002c4 <ADC_Enable+0x1c>
      wait_loop_index--;
 800032c:	9b01      	ldr	r3, [sp, #4]
 800032e:	3b01      	subs	r3, #1
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	e7e2      	b.n	80002fa <ADC_Enable+0x52>
 8000334:	80000017 	.word	0x80000017
 8000338:	20000000 	.word	0x20000000
 800033c:	000f4240 	.word	0x000f4240

08000340 <HAL_ADC_Init>:
{
 8000340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000342:	0004      	movs	r4, r0
    return HAL_ERROR;
 8000344:	2001      	movs	r0, #1
  if(hadc == NULL)
 8000346:	2c00      	cmp	r4, #0
 8000348:	d072      	beq.n	8000430 <HAL_ADC_Init+0xf0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800034a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800034c:	2b00      	cmp	r3, #0
 800034e:	d106      	bne.n	800035e <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8000350:	0022      	movs	r2, r4
 8000352:	3240      	adds	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 8000354:	64a3      	str	r3, [r4, #72]	; 0x48
    HAL_ADC_MspInit(hadc);
 8000356:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8000358:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 800035a:	f001 fe3d 	bl	8001fd8 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800035e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000360:	06db      	lsls	r3, r3, #27
 8000362:	d500      	bpl.n	8000366 <HAL_ADC_Init+0x26>
 8000364:	e079      	b.n	800045a <HAL_ADC_Init+0x11a>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000366:	2204      	movs	r2, #4
 8000368:	6823      	ldr	r3, [r4, #0]
 800036a:	6898      	ldr	r0, [r3, #8]
 800036c:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 800036e:	d000      	beq.n	8000372 <HAL_ADC_Init+0x32>
 8000370:	e073      	b.n	800045a <HAL_ADC_Init+0x11a>
    ADC_STATE_CLR_SET(hadc->State,
 8000372:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000374:	4942      	ldr	r1, [pc, #264]	; (8000480 <HAL_ADC_Init+0x140>)
 8000376:	4011      	ands	r1, r2
 8000378:	2202      	movs	r2, #2
 800037a:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 800037c:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 800037e:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000380:	689a      	ldr	r2, [r3, #8]
 8000382:	400a      	ands	r2, r1
 8000384:	2a01      	cmp	r2, #1
 8000386:	d000      	beq.n	800038a <HAL_ADC_Init+0x4a>
 8000388:	e06d      	b.n	8000466 <HAL_ADC_Init+0x126>
 800038a:	6819      	ldr	r1, [r3, #0]
 800038c:	4211      	tst	r1, r2
 800038e:	d102      	bne.n	8000396 <HAL_ADC_Init+0x56>
 8000390:	68da      	ldr	r2, [r3, #12]
 8000392:	0412      	lsls	r2, r2, #16
 8000394:	d567      	bpl.n	8000466 <HAL_ADC_Init+0x126>
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000396:	68da      	ldr	r2, [r3, #12]
 8000398:	493a      	ldr	r1, [pc, #232]	; (8000484 <HAL_ADC_Init+0x144>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800039a:	6a25      	ldr	r5, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800039c:	400a      	ands	r2, r1
 800039e:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80003a0:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80003a2:	036f      	lsls	r7, r5, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80003a4:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80003a6:	69e2      	ldr	r2, [r4, #28]
 80003a8:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80003aa:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80003ac:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80003ae:	3a01      	subs	r2, #1
 80003b0:	1e56      	subs	r6, r2, #1
 80003b2:	41b2      	sbcs	r2, r6
 80003b4:	0316      	lsls	r6, r2, #12
 80003b6:	68e2      	ldr	r2, [r4, #12]
 80003b8:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80003ba:	6922      	ldr	r2, [r4, #16]
 80003bc:	430f      	orrs	r7, r1
 80003be:	2a02      	cmp	r2, #2
 80003c0:	d100      	bne.n	80003c4 <HAL_ADC_Init+0x84>
 80003c2:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80003c4:	6b22      	ldr	r2, [r4, #48]	; 0x30
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80003c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80003c8:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80003ca:	433a      	orrs	r2, r7
 80003cc:	4332      	orrs	r2, r6
 80003ce:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80003d0:	2901      	cmp	r1, #1
 80003d2:	d104      	bne.n	80003de <HAL_ADC_Init+0x9e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d12c      	bne.n	8000432 <HAL_ADC_Init+0xf2>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80003d8:	2180      	movs	r1, #128	; 0x80
 80003da:	0249      	lsls	r1, r1, #9
 80003dc:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80003de:	20c2      	movs	r0, #194	; 0xc2
 80003e0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80003e2:	30ff      	adds	r0, #255	; 0xff
 80003e4:	4281      	cmp	r1, r0
 80003e6:	d002      	beq.n	80003ee <HAL_ADC_Init+0xae>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80003e8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80003ea:	4301      	orrs	r1, r0
 80003ec:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80003ee:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80003f0:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80003f2:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80003f4:	4311      	orrs	r1, r2
 80003f6:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80003f8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80003fa:	4281      	cmp	r1, r0
 80003fc:	d002      	beq.n	8000404 <HAL_ADC_Init+0xc4>
 80003fe:	1e48      	subs	r0, r1, #1
 8000400:	2806      	cmp	r0, #6
 8000402:	d807      	bhi.n	8000414 <HAL_ADC_Init+0xd4>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000404:	2507      	movs	r5, #7
 8000406:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000408:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800040a:	43a8      	bics	r0, r5
 800040c:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800040e:	6958      	ldr	r0, [r3, #20]
 8000410:	4301      	orrs	r1, r0
 8000412:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000414:	68db      	ldr	r3, [r3, #12]
 8000416:	491c      	ldr	r1, [pc, #112]	; (8000488 <HAL_ADC_Init+0x148>)
 8000418:	400b      	ands	r3, r1
 800041a:	429a      	cmp	r2, r3
 800041c:	d111      	bne.n	8000442 <HAL_ADC_Init+0x102>
      ADC_CLEAR_ERRORCODE(hadc);
 800041e:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000420:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8000422:	64a0      	str	r0, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8000424:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000426:	4393      	bics	r3, r2
 8000428:	001a      	movs	r2, r3
 800042a:	2301      	movs	r3, #1
 800042c:	4313      	orrs	r3, r2
 800042e:	6463      	str	r3, [r4, #68]	; 0x44
}
 8000430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000432:	2020      	movs	r0, #32
 8000434:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8000436:	4328      	orrs	r0, r5
 8000438:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800043a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800043c:	4301      	orrs	r1, r0
 800043e:	64a1      	str	r1, [r4, #72]	; 0x48
 8000440:	e7cd      	b.n	80003de <HAL_ADC_Init+0x9e>
      ADC_STATE_CLR_SET(hadc->State,
 8000442:	2212      	movs	r2, #18
 8000444:	6c63      	ldr	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000446:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8000448:	4393      	bics	r3, r2
 800044a:	001a      	movs	r2, r3
 800044c:	2310      	movs	r3, #16
 800044e:	4313      	orrs	r3, r2
 8000450:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000452:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000454:	4303      	orrs	r3, r0
 8000456:	64a3      	str	r3, [r4, #72]	; 0x48
 8000458:	e7ea      	b.n	8000430 <HAL_ADC_Init+0xf0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800045a:	2310      	movs	r3, #16
 800045c:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800045e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000460:	4313      	orrs	r3, r2
 8000462:	6463      	str	r3, [r4, #68]	; 0x44
 8000464:	e7e4      	b.n	8000430 <HAL_ADC_Init+0xf0>
      MODIFY_REG(hadc->Instance->CFGR1,
 8000466:	2118      	movs	r1, #24
 8000468:	68da      	ldr	r2, [r3, #12]
 800046a:	438a      	bics	r2, r1
 800046c:	68a1      	ldr	r1, [r4, #8]
 800046e:	430a      	orrs	r2, r1
 8000470:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000472:	6919      	ldr	r1, [r3, #16]
 8000474:	6862      	ldr	r2, [r4, #4]
 8000476:	0089      	lsls	r1, r1, #2
 8000478:	0889      	lsrs	r1, r1, #2
 800047a:	4311      	orrs	r1, r2
 800047c:	6119      	str	r1, [r3, #16]
 800047e:	e78a      	b.n	8000396 <HAL_ADC_Init+0x56>
 8000480:	fffffefd 	.word	0xfffffefd
 8000484:	fffe0219 	.word	0xfffe0219
 8000488:	833fffe7 	.word	0x833fffe7

0800048c <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800048c:	6803      	ldr	r3, [r0, #0]
{
 800048e:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000490:	689b      	ldr	r3, [r3, #8]
{
 8000492:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 8000494:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000496:	075b      	lsls	r3, r3, #29
 8000498:	d41a      	bmi.n	80004d0 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 800049a:	0025      	movs	r5, r4
 800049c:	3540      	adds	r5, #64	; 0x40
 800049e:	782b      	ldrb	r3, [r5, #0]
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d015      	beq.n	80004d0 <HAL_ADC_Start+0x44>
 80004a4:	2301      	movs	r3, #1
 80004a6:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80004a8:	69e3      	ldr	r3, [r4, #28]
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d111      	bne.n	80004d2 <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 80004ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80004b0:	4a0b      	ldr	r2, [pc, #44]	; (80004e0 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 80004b2:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80004b4:	401a      	ands	r2, r3
 80004b6:	2380      	movs	r3, #128	; 0x80
 80004b8:	005b      	lsls	r3, r3, #1
 80004ba:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80004bc:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 80004be:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80004c0:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 80004c2:	64a0      	str	r0, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 80004c4:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80004c6:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80004c8:	6899      	ldr	r1, [r3, #8]
 80004ca:	3a18      	subs	r2, #24
 80004cc:	430a      	orrs	r2, r1
 80004ce:	609a      	str	r2, [r3, #8]
}
 80004d0:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80004d2:	0020      	movs	r0, r4
 80004d4:	f7ff fee8 	bl	80002a8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80004d8:	2800      	cmp	r0, #0
 80004da:	d1f9      	bne.n	80004d0 <HAL_ADC_Start+0x44>
 80004dc:	e7e7      	b.n	80004ae <HAL_ADC_Start+0x22>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	fffff0fe 	.word	0xfffff0fe

080004e4 <HAL_ADC_PollForConversion>:
{
 80004e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80004e6:	6945      	ldr	r5, [r0, #20]
{
 80004e8:	0004      	movs	r4, r0
 80004ea:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80004ec:	2d08      	cmp	r5, #8
 80004ee:	d00d      	beq.n	800050c <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80004f0:	6803      	ldr	r3, [r0, #0]
 80004f2:	2001      	movs	r0, #1
 80004f4:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80004f6:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80004f8:	4203      	tst	r3, r0
 80004fa:	d007      	beq.n	800050c <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80004fc:	2320      	movs	r3, #32
 80004fe:	6c62      	ldr	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 8000500:	3440      	adds	r4, #64	; 0x40
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000502:	4313      	orrs	r3, r2
 8000504:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 8000506:	2300      	movs	r3, #0
 8000508:	7023      	strb	r3, [r4, #0]
}
 800050a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 800050c:	f7ff fec6 	bl	800029c <HAL_GetTick>
 8000510:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000512:	6823      	ldr	r3, [r4, #0]
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	422a      	tst	r2, r5
 8000518:	d023      	beq.n	8000562 <HAL_ADC_PollForConversion+0x7e>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800051a:	2280      	movs	r2, #128	; 0x80
 800051c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800051e:	0092      	lsls	r2, r2, #2
 8000520:	430a      	orrs	r2, r1
 8000522:	6462      	str	r2, [r4, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000524:	22c0      	movs	r2, #192	; 0xc0
 8000526:	68d9      	ldr	r1, [r3, #12]
 8000528:	0112      	lsls	r2, r2, #4
 800052a:	4211      	tst	r1, r2
 800052c:	d112      	bne.n	8000554 <HAL_ADC_PollForConversion+0x70>
 800052e:	6a22      	ldr	r2, [r4, #32]
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <HAL_ADC_PollForConversion+0x70>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	0712      	lsls	r2, r2, #28
 8000538:	d50c      	bpl.n	8000554 <HAL_ADC_PollForConversion+0x70>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800053a:	689a      	ldr	r2, [r3, #8]
 800053c:	0752      	lsls	r2, r2, #29
 800053e:	d423      	bmi.n	8000588 <HAL_ADC_PollForConversion+0xa4>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000540:	210c      	movs	r1, #12
 8000542:	685a      	ldr	r2, [r3, #4]
 8000544:	438a      	bics	r2, r1
 8000546:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8000548:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800054a:	4914      	ldr	r1, [pc, #80]	; (800059c <HAL_ADC_PollForConversion+0xb8>)
 800054c:	4011      	ands	r1, r2
 800054e:	2201      	movs	r2, #1
 8000550:	430a      	orrs	r2, r1
 8000552:	6462      	str	r2, [r4, #68]	; 0x44
  return HAL_OK;
 8000554:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000556:	69a2      	ldr	r2, [r4, #24]
 8000558:	4282      	cmp	r2, r0
 800055a:	d1d6      	bne.n	800050a <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800055c:	220c      	movs	r2, #12
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	e7d3      	b.n	800050a <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 8000562:	1c72      	adds	r2, r6, #1
 8000564:	d0d6      	beq.n	8000514 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8000566:	2e00      	cmp	r6, #0
 8000568:	d108      	bne.n	800057c <HAL_ADC_PollForConversion+0x98>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800056a:	2304      	movs	r3, #4
 800056c:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800056e:	3440      	adds	r4, #64	; 0x40
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000570:	4313      	orrs	r3, r2
 8000572:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 8000574:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8000576:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 8000578:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 800057a:	e7c6      	b.n	800050a <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800057c:	f7ff fe8e 	bl	800029c <HAL_GetTick>
 8000580:	1bc0      	subs	r0, r0, r7
 8000582:	4286      	cmp	r6, r0
 8000584:	d2c5      	bcs.n	8000512 <HAL_ADC_PollForConversion+0x2e>
 8000586:	e7f0      	b.n	800056a <HAL_ADC_PollForConversion+0x86>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000588:	2220      	movs	r2, #32
 800058a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800058c:	430a      	orrs	r2, r1
 800058e:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000590:	2201      	movs	r2, #1
 8000592:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000594:	430a      	orrs	r2, r1
 8000596:	64a2      	str	r2, [r4, #72]	; 0x48
 8000598:	e7dc      	b.n	8000554 <HAL_ADC_PollForConversion+0x70>
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	fffffefe 	.word	0xfffffefe

080005a0 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80005a0:	6803      	ldr	r3, [r0, #0]
 80005a2:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80005a4:	4770      	bx	lr

080005a6 <HAL_ADC_ConvCpltCallback>:
 80005a6:	4770      	bx	lr

080005a8 <HAL_ADC_LevelOutOfWindowCallback>:
 80005a8:	4770      	bx	lr

080005aa <HAL_ADC_ErrorCallback>:
}
 80005aa:	4770      	bx	lr

080005ac <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80005ac:	2204      	movs	r2, #4
 80005ae:	6803      	ldr	r3, [r0, #0]
{
 80005b0:	b570      	push	{r4, r5, r6, lr}
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80005b2:	6819      	ldr	r1, [r3, #0]
{
 80005b4:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80005b6:	4211      	tst	r1, r2
 80005b8:	d002      	beq.n	80005c0 <HAL_ADC_IRQHandler+0x14>
 80005ba:	6859      	ldr	r1, [r3, #4]
 80005bc:	4211      	tst	r1, r2
 80005be:	d106      	bne.n	80005ce <HAL_ADC_IRQHandler+0x22>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80005c0:	2208      	movs	r2, #8
 80005c2:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80005c4:	4211      	tst	r1, r2
 80005c6:	d028      	beq.n	800061a <HAL_ADC_IRQHandler+0x6e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80005c8:	6859      	ldr	r1, [r3, #4]
 80005ca:	4211      	tst	r1, r2
 80005cc:	d025      	beq.n	800061a <HAL_ADC_IRQHandler+0x6e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005ce:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80005d0:	06d2      	lsls	r2, r2, #27
 80005d2:	d404      	bmi.n	80005de <HAL_ADC_IRQHandler+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80005d4:	2280      	movs	r2, #128	; 0x80
 80005d6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80005d8:	0092      	lsls	r2, r2, #2
 80005da:	430a      	orrs	r2, r1
 80005dc:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80005de:	22c0      	movs	r2, #192	; 0xc0
 80005e0:	68d9      	ldr	r1, [r3, #12]
 80005e2:	0112      	lsls	r2, r2, #4
 80005e4:	4211      	tst	r1, r2
 80005e6:	d112      	bne.n	800060e <HAL_ADC_IRQHandler+0x62>
 80005e8:	6a22      	ldr	r2, [r4, #32]
 80005ea:	2a00      	cmp	r2, #0
 80005ec:	d10f      	bne.n	800060e <HAL_ADC_IRQHandler+0x62>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	0712      	lsls	r2, r2, #28
 80005f2:	d50c      	bpl.n	800060e <HAL_ADC_IRQHandler+0x62>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80005f4:	689a      	ldr	r2, [r3, #8]
 80005f6:	0752      	lsls	r2, r2, #29
 80005f8:	d43c      	bmi.n	8000674 <HAL_ADC_IRQHandler+0xc8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80005fa:	210c      	movs	r1, #12
 80005fc:	685a      	ldr	r2, [r3, #4]
 80005fe:	438a      	bics	r2, r1
 8000600:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8000602:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000604:	4a20      	ldr	r2, [pc, #128]	; (8000688 <HAL_ADC_IRQHandler+0xdc>)
 8000606:	401a      	ands	r2, r3
 8000608:	2301      	movs	r3, #1
 800060a:	4313      	orrs	r3, r2
 800060c:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 800060e:	0020      	movs	r0, r4
 8000610:	f7ff ffc9 	bl	80005a6 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8000614:	220c      	movs	r2, #12
 8000616:	6823      	ldr	r3, [r4, #0]
 8000618:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800061a:	2580      	movs	r5, #128	; 0x80
 800061c:	6823      	ldr	r3, [r4, #0]
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	422a      	tst	r2, r5
 8000622:	d00c      	beq.n	800063e <HAL_ADC_IRQHandler+0x92>
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	422b      	tst	r3, r5
 8000628:	d009      	beq.n	800063e <HAL_ADC_IRQHandler+0x92>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800062a:	2380      	movs	r3, #128	; 0x80
 800062c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800062e:	025b      	lsls	r3, r3, #9
 8000630:	4313      	orrs	r3, r2
 8000632:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000634:	0020      	movs	r0, r4
 8000636:	f7ff ffb7 	bl	80005a8 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800063a:	6823      	ldr	r3, [r4, #0]
 800063c:	601d      	str	r5, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800063e:	2210      	movs	r2, #16
 8000640:	6823      	ldr	r3, [r4, #0]
 8000642:	6819      	ldr	r1, [r3, #0]
 8000644:	4211      	tst	r1, r2
 8000646:	d014      	beq.n	8000672 <HAL_ADC_IRQHandler+0xc6>
 8000648:	6859      	ldr	r1, [r3, #4]
 800064a:	4211      	tst	r1, r2
 800064c:	d011      	beq.n	8000672 <HAL_ADC_IRQHandler+0xc6>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800064e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000650:	2a01      	cmp	r2, #1
 8000652:	d002      	beq.n	800065a <HAL_ADC_IRQHandler+0xae>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8000654:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000656:	07d2      	lsls	r2, r2, #31
 8000658:	d508      	bpl.n	800066c <HAL_ADC_IRQHandler+0xc0>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800065a:	2202      	movs	r2, #2
 800065c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 800065e:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000660:	430a      	orrs	r2, r1
 8000662:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000664:	2210      	movs	r2, #16
 8000666:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8000668:	f7ff ff9f 	bl	80005aa <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800066c:	2210      	movs	r2, #16
 800066e:	6823      	ldr	r3, [r4, #0]
 8000670:	601a      	str	r2, [r3, #0]
}
 8000672:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000674:	2320      	movs	r3, #32
 8000676:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000678:	4313      	orrs	r3, r2
 800067a:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800067c:	2301      	movs	r3, #1
 800067e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000680:	4313      	orrs	r3, r2
 8000682:	64a3      	str	r3, [r4, #72]	; 0x48
 8000684:	e7c3      	b.n	800060e <HAL_ADC_IRQHandler+0x62>
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	fffffefe 	.word	0xfffffefe

0800068c <HAL_ADC_ConfigChannel>:
{
 800068c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 800068e:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 8000690:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8000692:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000694:	3440      	adds	r4, #64	; 0x40
 8000696:	7823      	ldrb	r3, [r4, #0]
{
 8000698:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 800069a:	2002      	movs	r0, #2
 800069c:	2b01      	cmp	r3, #1
 800069e:	d02b      	beq.n	80006f8 <HAL_ADC_ConfigChannel+0x6c>
 80006a0:	2301      	movs	r3, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80006a2:	682a      	ldr	r2, [r5, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80006a4:	6bae      	ldr	r6, [r5, #56]	; 0x38
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80006a6:	6890      	ldr	r0, [r2, #8]
  __HAL_LOCK(hadc);
 80006a8:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80006aa:	0740      	lsls	r0, r0, #29
 80006ac:	d45a      	bmi.n	8000764 <HAL_ADC_ConfigChannel+0xd8>
    if (sConfig->Rank != ADC_RANK_NONE)
 80006ae:	4830      	ldr	r0, [pc, #192]	; (8000770 <HAL_ADC_ConfigChannel+0xe4>)
 80006b0:	684f      	ldr	r7, [r1, #4]
 80006b2:	680d      	ldr	r5, [r1, #0]
 80006b4:	4287      	cmp	r7, r0
 80006b6:	d03f      	beq.n	8000738 <HAL_ADC_ConfigChannel+0xac>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80006b8:	40ab      	lsls	r3, r5
 80006ba:	0018      	movs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80006bc:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80006be:	6a97      	ldr	r7, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80006c0:	055b      	lsls	r3, r3, #21
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80006c2:	4338      	orrs	r0, r7
 80006c4:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80006c6:	429e      	cmp	r6, r3
 80006c8:	d00f      	beq.n	80006ea <HAL_ADC_ConfigChannel+0x5e>
 80006ca:	3e01      	subs	r6, #1
 80006cc:	2e06      	cmp	r6, #6
 80006ce:	d90c      	bls.n	80006ea <HAL_ADC_ConfigChannel+0x5e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80006d0:	688b      	ldr	r3, [r1, #8]
 80006d2:	2107      	movs	r1, #7
 80006d4:	6950      	ldr	r0, [r2, #20]
 80006d6:	4008      	ands	r0, r1
 80006d8:	4283      	cmp	r3, r0
 80006da:	d006      	beq.n	80006ea <HAL_ADC_ConfigChannel+0x5e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80006dc:	6950      	ldr	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80006de:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80006e0:	4388      	bics	r0, r1
 80006e2:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80006e4:	6950      	ldr	r0, [r2, #20]
 80006e6:	4303      	orrs	r3, r0
 80006e8:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80006ea:	002b      	movs	r3, r5
 80006ec:	3b10      	subs	r3, #16
 80006ee:	2b02      	cmp	r3, #2
 80006f0:	d903      	bls.n	80006fa <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006f2:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80006f4:	2300      	movs	r3, #0
 80006f6:	7023      	strb	r3, [r4, #0]
}
 80006f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80006fa:	4a1e      	ldr	r2, [pc, #120]	; (8000774 <HAL_ADC_ConfigChannel+0xe8>)
 80006fc:	2380      	movs	r3, #128	; 0x80
 80006fe:	6811      	ldr	r1, [r2, #0]
 8000700:	2d10      	cmp	r5, #16
 8000702:	d015      	beq.n	8000730 <HAL_ADC_ConfigChannel+0xa4>
 8000704:	2d11      	cmp	r5, #17
 8000706:	d015      	beq.n	8000734 <HAL_ADC_ConfigChannel+0xa8>
 8000708:	045b      	lsls	r3, r3, #17
 800070a:	430b      	orrs	r3, r1
 800070c:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800070e:	2d10      	cmp	r5, #16
 8000710:	d1ef      	bne.n	80006f2 <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000712:	4b19      	ldr	r3, [pc, #100]	; (8000778 <HAL_ADC_ConfigChannel+0xec>)
 8000714:	4919      	ldr	r1, [pc, #100]	; (800077c <HAL_ADC_ConfigChannel+0xf0>)
 8000716:	6818      	ldr	r0, [r3, #0]
 8000718:	f7ff fd0a 	bl	8000130 <__udivsi3>
 800071c:	230a      	movs	r3, #10
 800071e:	4358      	muls	r0, r3
 8000720:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8000722:	9b01      	ldr	r3, [sp, #4]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d0e4      	beq.n	80006f2 <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 8000728:	9b01      	ldr	r3, [sp, #4]
 800072a:	3b01      	subs	r3, #1
 800072c:	9301      	str	r3, [sp, #4]
 800072e:	e7f8      	b.n	8000722 <HAL_ADC_ConfigChannel+0x96>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000730:	041b      	lsls	r3, r3, #16
 8000732:	e7ea      	b.n	800070a <HAL_ADC_ConfigChannel+0x7e>
 8000734:	03db      	lsls	r3, r3, #15
 8000736:	e7e8      	b.n	800070a <HAL_ADC_ConfigChannel+0x7e>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000738:	40ab      	lsls	r3, r5
 800073a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800073c:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800073e:	002b      	movs	r3, r5
 8000740:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000742:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000744:	2b02      	cmp	r3, #2
 8000746:	d8d4      	bhi.n	80006f2 <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <HAL_ADC_ConfigChannel+0xe8>)
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	2d10      	cmp	r5, #16
 800074e:	d005      	beq.n	800075c <HAL_ADC_ConfigChannel+0xd0>
 8000750:	2d11      	cmp	r5, #17
 8000752:	d005      	beq.n	8000760 <HAL_ADC_ConfigChannel+0xd4>
 8000754:	490a      	ldr	r1, [pc, #40]	; (8000780 <HAL_ADC_ConfigChannel+0xf4>)
 8000756:	400a      	ands	r2, r1
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	e7ca      	b.n	80006f2 <HAL_ADC_ConfigChannel+0x66>
 800075c:	4909      	ldr	r1, [pc, #36]	; (8000784 <HAL_ADC_ConfigChannel+0xf8>)
 800075e:	e7fa      	b.n	8000756 <HAL_ADC_ConfigChannel+0xca>
 8000760:	4909      	ldr	r1, [pc, #36]	; (8000788 <HAL_ADC_ConfigChannel+0xfc>)
 8000762:	e7f8      	b.n	8000756 <HAL_ADC_ConfigChannel+0xca>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000764:	2220      	movs	r2, #32
 8000766:	6c69      	ldr	r1, [r5, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000768:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800076a:	430a      	orrs	r2, r1
 800076c:	646a      	str	r2, [r5, #68]	; 0x44
 800076e:	e7c1      	b.n	80006f4 <HAL_ADC_ConfigChannel+0x68>
 8000770:	00001001 	.word	0x00001001
 8000774:	40012708 	.word	0x40012708
 8000778:	20000000 	.word	0x20000000
 800077c:	000f4240 	.word	0x000f4240
 8000780:	feffffff 	.word	0xfeffffff
 8000784:	ff7fffff 	.word	0xff7fffff
 8000788:	ffbfffff 	.word	0xffbfffff

0800078c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000790:	2800      	cmp	r0, #0
 8000792:	da14      	bge.n	80007be <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000794:	230f      	movs	r3, #15
 8000796:	b2c0      	uxtb	r0, r0
 8000798:	4003      	ands	r3, r0
 800079a:	3b08      	subs	r3, #8
 800079c:	4a11      	ldr	r2, [pc, #68]	; (80007e4 <HAL_NVIC_SetPriority+0x58>)
 800079e:	089b      	lsrs	r3, r3, #2
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	189b      	adds	r3, r3, r2
 80007a4:	2203      	movs	r2, #3
 80007a6:	4010      	ands	r0, r2
 80007a8:	4090      	lsls	r0, r2
 80007aa:	32fc      	adds	r2, #252	; 0xfc
 80007ac:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007ae:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007b0:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007b2:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007b4:	69dc      	ldr	r4, [r3, #28]
 80007b6:	43ac      	bics	r4, r5
 80007b8:	4321      	orrs	r1, r4
 80007ba:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007be:	2503      	movs	r5, #3
 80007c0:	0883      	lsrs	r3, r0, #2
 80007c2:	4028      	ands	r0, r5
 80007c4:	40a8      	lsls	r0, r5
 80007c6:	35fc      	adds	r5, #252	; 0xfc
 80007c8:	002e      	movs	r6, r5
 80007ca:	4a07      	ldr	r2, [pc, #28]	; (80007e8 <HAL_NVIC_SetPriority+0x5c>)
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	189b      	adds	r3, r3, r2
 80007d0:	22c0      	movs	r2, #192	; 0xc0
 80007d2:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007d4:	4029      	ands	r1, r5
 80007d6:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007d8:	0092      	lsls	r2, r2, #2
 80007da:	589c      	ldr	r4, [r3, r2]
 80007dc:	43b4      	bics	r4, r6
 80007de:	4321      	orrs	r1, r4
 80007e0:	5099      	str	r1, [r3, r2]
 80007e2:	e7eb      	b.n	80007bc <HAL_NVIC_SetPriority+0x30>
 80007e4:	e000ed00 	.word	0xe000ed00
 80007e8:	e000e100 	.word	0xe000e100

080007ec <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80007ec:	231f      	movs	r3, #31
 80007ee:	4018      	ands	r0, r3
 80007f0:	3b1e      	subs	r3, #30
 80007f2:	4083      	lsls	r3, r0
 80007f4:	4a01      	ldr	r2, [pc, #4]	; (80007fc <HAL_NVIC_EnableIRQ+0x10>)
 80007f6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80007f8:	4770      	bx	lr
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	e000e100 	.word	0xe000e100

08000800 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000800:	4a09      	ldr	r2, [pc, #36]	; (8000828 <HAL_SYSTICK_Config+0x28>)
 8000802:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000804:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000806:	4293      	cmp	r3, r2
 8000808:	d80d      	bhi.n	8000826 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800080a:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800080c:	4a07      	ldr	r2, [pc, #28]	; (800082c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800080e:	4808      	ldr	r0, [pc, #32]	; (8000830 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000810:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000812:	6a03      	ldr	r3, [r0, #32]
 8000814:	0609      	lsls	r1, r1, #24
 8000816:	021b      	lsls	r3, r3, #8
 8000818:	0a1b      	lsrs	r3, r3, #8
 800081a:	430b      	orrs	r3, r1
 800081c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800081e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000820:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000822:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000824:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000826:	4770      	bx	lr
 8000828:	00ffffff 	.word	0x00ffffff
 800082c:	e000e010 	.word	0xe000e010
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000836:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000838:	2804      	cmp	r0, #4
 800083a:	d102      	bne.n	8000842 <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800083c:	4310      	orrs	r0, r2
 800083e:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000840:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000842:	2104      	movs	r1, #4
 8000844:	438a      	bics	r2, r1
 8000846:	601a      	str	r2, [r3, #0]
}
 8000848:	e7fa      	b.n	8000840 <HAL_SYSTICK_CLKSourceConfig+0xc>
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	e000e010 	.word	0xe000e010

08000850 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000850:	4770      	bx	lr

08000852 <HAL_SYSTICK_IRQHandler>:
{
 8000852:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8000854:	f7ff fffc 	bl	8000850 <HAL_SYSTICK_Callback>
}
 8000858:	bd10      	pop	{r4, pc}
	...

0800085c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800085c:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800085e:	680b      	ldr	r3, [r1, #0]
{ 
 8000860:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000862:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 8000864:	2300      	movs	r3, #0
{ 
 8000866:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000868:	9a02      	ldr	r2, [sp, #8]
 800086a:	40da      	lsrs	r2, r3
 800086c:	d101      	bne.n	8000872 <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 800086e:	b007      	add	sp, #28
 8000870:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000872:	2201      	movs	r2, #1
 8000874:	409a      	lsls	r2, r3
 8000876:	9203      	str	r2, [sp, #12]
 8000878:	9903      	ldr	r1, [sp, #12]
 800087a:	9a02      	ldr	r2, [sp, #8]
 800087c:	400a      	ands	r2, r1
 800087e:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8000880:	d100      	bne.n	8000884 <HAL_GPIO_Init+0x28>
 8000882:	e088      	b.n	8000996 <HAL_GPIO_Init+0x13a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000884:	9a01      	ldr	r2, [sp, #4]
 8000886:	2110      	movs	r1, #16
 8000888:	6852      	ldr	r2, [r2, #4]
 800088a:	0016      	movs	r6, r2
 800088c:	438e      	bics	r6, r1
 800088e:	2e02      	cmp	r6, #2
 8000890:	d10e      	bne.n	80008b0 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000892:	2507      	movs	r5, #7
 8000894:	401d      	ands	r5, r3
 8000896:	00ad      	lsls	r5, r5, #2
 8000898:	3901      	subs	r1, #1
 800089a:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 800089c:	08dc      	lsrs	r4, r3, #3
 800089e:	00a4      	lsls	r4, r4, #2
 80008a0:	1904      	adds	r4, r0, r4
 80008a2:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80008a4:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80008a6:	9901      	ldr	r1, [sp, #4]
 80008a8:	6909      	ldr	r1, [r1, #16]
 80008aa:	40a9      	lsls	r1, r5
 80008ac:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 80008ae:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80008b0:	2403      	movs	r4, #3
 80008b2:	005f      	lsls	r7, r3, #1
 80008b4:	40bc      	lsls	r4, r7
 80008b6:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80008b8:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ba:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80008bc:	4025      	ands	r5, r4
 80008be:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008c0:	2503      	movs	r5, #3
 80008c2:	4015      	ands	r5, r2
 80008c4:	40bd      	lsls	r5, r7
 80008c6:	4661      	mov	r1, ip
 80008c8:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 80008ca:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008cc:	2e01      	cmp	r6, #1
 80008ce:	d80f      	bhi.n	80008f0 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80008d0:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 80008d2:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80008d4:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008d6:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80008d8:	40bd      	lsls	r5, r7
 80008da:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80008dc:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80008de:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80008e0:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008e2:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80008e4:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008e6:	2101      	movs	r1, #1
 80008e8:	400d      	ands	r5, r1
 80008ea:	409d      	lsls	r5, r3
 80008ec:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80008ee:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 80008f0:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80008f2:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008f4:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80008f6:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80008f8:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80008fa:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80008fc:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80008fe:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000900:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000902:	420a      	tst	r2, r1
 8000904:	d047      	beq.n	8000996 <HAL_GPIO_Init+0x13a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	2101      	movs	r1, #1
 8000908:	4c24      	ldr	r4, [pc, #144]	; (800099c <HAL_GPIO_Init+0x140>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800090a:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090c:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800090e:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000910:	430d      	orrs	r5, r1
 8000912:	61a5      	str	r5, [r4, #24]
 8000914:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8000916:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000918:	400c      	ands	r4, r1
 800091a:	9405      	str	r4, [sp, #20]
 800091c:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800091e:	240f      	movs	r4, #15
 8000920:	491f      	ldr	r1, [pc, #124]	; (80009a0 <HAL_GPIO_Init+0x144>)
 8000922:	00ad      	lsls	r5, r5, #2
 8000924:	00b6      	lsls	r6, r6, #2
 8000926:	186d      	adds	r5, r5, r1
 8000928:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800092a:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 800092c:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800092e:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000930:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000932:	2400      	movs	r4, #0
 8000934:	4288      	cmp	r0, r1
 8000936:	d008      	beq.n	800094a <HAL_GPIO_Init+0xee>
 8000938:	491a      	ldr	r1, [pc, #104]	; (80009a4 <HAL_GPIO_Init+0x148>)
 800093a:	3401      	adds	r4, #1
 800093c:	4288      	cmp	r0, r1
 800093e:	d004      	beq.n	800094a <HAL_GPIO_Init+0xee>
 8000940:	4919      	ldr	r1, [pc, #100]	; (80009a8 <HAL_GPIO_Init+0x14c>)
 8000942:	3404      	adds	r4, #4
 8000944:	4288      	cmp	r0, r1
 8000946:	d100      	bne.n	800094a <HAL_GPIO_Init+0xee>
 8000948:	3c03      	subs	r4, #3
 800094a:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800094c:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800094e:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 8000950:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 8000952:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8000954:	4c15      	ldr	r4, [pc, #84]	; (80009ac <HAL_GPIO_Init+0x150>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000956:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8000958:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 800095a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800095c:	03d1      	lsls	r1, r2, #15
 800095e:	d401      	bmi.n	8000964 <HAL_GPIO_Init+0x108>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000960:	003e      	movs	r6, r7
 8000962:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8000964:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8000966:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 8000968:	9e00      	ldr	r6, [sp, #0]
 800096a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800096c:	0391      	lsls	r1, r2, #14
 800096e:	d401      	bmi.n	8000974 <HAL_GPIO_Init+0x118>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000970:	003e      	movs	r6, r7
 8000972:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8000974:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8000976:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 8000978:	9e00      	ldr	r6, [sp, #0]
 800097a:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800097c:	02d1      	lsls	r1, r2, #11
 800097e:	d401      	bmi.n	8000984 <HAL_GPIO_Init+0x128>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000980:	003e      	movs	r6, r7
 8000982:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8000984:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8000986:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 8000988:	9f00      	ldr	r7, [sp, #0]
 800098a:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800098c:	0292      	lsls	r2, r2, #10
 800098e:	d401      	bmi.n	8000994 <HAL_GPIO_Init+0x138>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000990:	402e      	ands	r6, r5
 8000992:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8000994:	60e7      	str	r7, [r4, #12]
    position++;
 8000996:	3301      	adds	r3, #1
 8000998:	e766      	b.n	8000868 <HAL_GPIO_Init+0xc>
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	40021000 	.word	0x40021000
 80009a0:	40010000 	.word	0x40010000
 80009a4:	48000400 	.word	0x48000400
 80009a8:	48000800 	.word	0x48000800
 80009ac:	40010400 	.word	0x40010400

080009b0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80009b0:	6900      	ldr	r0, [r0, #16]
 80009b2:	4008      	ands	r0, r1
 80009b4:	1e41      	subs	r1, r0, #1
 80009b6:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80009b8:	b2c0      	uxtb	r0, r0
  }
 80009ba:	4770      	bx	lr

080009bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80009bc:	2a00      	cmp	r2, #0
 80009be:	d001      	beq.n	80009c4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80009c0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80009c2:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80009c4:	6281      	str	r1, [r0, #40]	; 0x28
}
 80009c6:	e7fc      	b.n	80009c2 <HAL_GPIO_WritePin+0x6>

080009c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009ca:	6803      	ldr	r3, [r0, #0]
{
 80009cc:	b085      	sub	sp, #20
 80009ce:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009d0:	07db      	lsls	r3, r3, #31
 80009d2:	d433      	bmi.n	8000a3c <HAL_RCC_OscConfig+0x74>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009d4:	682b      	ldr	r3, [r5, #0]
 80009d6:	079b      	lsls	r3, r3, #30
 80009d8:	d500      	bpl.n	80009dc <HAL_RCC_OscConfig+0x14>
 80009da:	e08a      	b.n	8000af2 <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009dc:	682b      	ldr	r3, [r5, #0]
 80009de:	071b      	lsls	r3, r3, #28
 80009e0:	d500      	bpl.n	80009e4 <HAL_RCC_OscConfig+0x1c>
 80009e2:	e0ca      	b.n	8000b7a <HAL_RCC_OscConfig+0x1b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009e4:	682b      	ldr	r3, [r5, #0]
 80009e6:	075b      	lsls	r3, r3, #29
 80009e8:	d500      	bpl.n	80009ec <HAL_RCC_OscConfig+0x24>
 80009ea:	e0ed      	b.n	8000bc8 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80009ec:	682b      	ldr	r3, [r5, #0]
 80009ee:	06db      	lsls	r3, r3, #27
 80009f0:	d51a      	bpl.n	8000a28 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80009f2:	696a      	ldr	r2, [r5, #20]
 80009f4:	4cbc      	ldr	r4, [pc, #752]	; (8000ce8 <HAL_RCC_OscConfig+0x320>)
 80009f6:	2304      	movs	r3, #4
 80009f8:	2a01      	cmp	r2, #1
 80009fa:	d000      	beq.n	80009fe <HAL_RCC_OscConfig+0x36>
 80009fc:	e159      	b.n	8000cb2 <HAL_RCC_OscConfig+0x2ea>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80009fe:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000a00:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000a02:	430b      	orrs	r3, r1
 8000a04:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000a06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000a08:	431a      	orrs	r2, r3
 8000a0a:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000a0c:	f7ff fc46 	bl	800029c <HAL_GetTick>
 8000a10:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000a12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000a14:	4233      	tst	r3, r6
 8000a16:	d100      	bne.n	8000a1a <HAL_RCC_OscConfig+0x52>
 8000a18:	e144      	b.n	8000ca4 <HAL_RCC_OscConfig+0x2dc>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000a1a:	21f8      	movs	r1, #248	; 0xf8
 8000a1c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000a1e:	69ab      	ldr	r3, [r5, #24]
 8000a20:	438a      	bics	r2, r1
 8000a22:	00db      	lsls	r3, r3, #3
 8000a24:	4313      	orrs	r3, r2
 8000a26:	6363      	str	r3, [r4, #52]	; 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000a28:	682b      	ldr	r3, [r5, #0]
 8000a2a:	069b      	lsls	r3, r3, #26
 8000a2c:	d500      	bpl.n	8000a30 <HAL_RCC_OscConfig+0x68>
 8000a2e:	e167      	b.n	8000d00 <HAL_RCC_OscConfig+0x338>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a30:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000a32:	2900      	cmp	r1, #0
 8000a34:	d000      	beq.n	8000a38 <HAL_RCC_OscConfig+0x70>
 8000a36:	e1a4      	b.n	8000d82 <HAL_RCC_OscConfig+0x3ba>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000a38:	2000      	movs	r0, #0
 8000a3a:	e018      	b.n	8000a6e <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a3c:	210c      	movs	r1, #12
 8000a3e:	4caa      	ldr	r4, [pc, #680]	; (8000ce8 <HAL_RCC_OscConfig+0x320>)
 8000a40:	6862      	ldr	r2, [r4, #4]
 8000a42:	400a      	ands	r2, r1
 8000a44:	2a04      	cmp	r2, #4
 8000a46:	d00b      	beq.n	8000a60 <HAL_RCC_OscConfig+0x98>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a48:	6863      	ldr	r3, [r4, #4]
 8000a4a:	400b      	ands	r3, r1
 8000a4c:	2b08      	cmp	r3, #8
 8000a4e:	d110      	bne.n	8000a72 <HAL_RCC_OscConfig+0xaa>
 8000a50:	22c0      	movs	r2, #192	; 0xc0
 8000a52:	6863      	ldr	r3, [r4, #4]
 8000a54:	0252      	lsls	r2, r2, #9
 8000a56:	4013      	ands	r3, r2
 8000a58:	2280      	movs	r2, #128	; 0x80
 8000a5a:	0252      	lsls	r2, r2, #9
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d108      	bne.n	8000a72 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a60:	6823      	ldr	r3, [r4, #0]
 8000a62:	039b      	lsls	r3, r3, #14
 8000a64:	d5b6      	bpl.n	80009d4 <HAL_RCC_OscConfig+0xc>
 8000a66:	686b      	ldr	r3, [r5, #4]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d1b3      	bne.n	80009d4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000a6c:	2001      	movs	r0, #1
}
 8000a6e:	b005      	add	sp, #20
 8000a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a72:	686b      	ldr	r3, [r5, #4]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d113      	bne.n	8000aa0 <HAL_RCC_OscConfig+0xd8>
 8000a78:	2380      	movs	r3, #128	; 0x80
 8000a7a:	6822      	ldr	r2, [r4, #0]
 8000a7c:	025b      	lsls	r3, r3, #9
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a82:	f7ff fc0b 	bl	800029c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a86:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000a88:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a8a:	02b6      	lsls	r6, r6, #10
 8000a8c:	6823      	ldr	r3, [r4, #0]
 8000a8e:	4233      	tst	r3, r6
 8000a90:	d1a0      	bne.n	80009d4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a92:	f7ff fc03 	bl	800029c <HAL_GetTick>
 8000a96:	1bc0      	subs	r0, r0, r7
 8000a98:	2864      	cmp	r0, #100	; 0x64
 8000a9a:	d9f7      	bls.n	8000a8c <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	e7e6      	b.n	8000a6e <HAL_RCC_OscConfig+0xa6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d116      	bne.n	8000ad2 <HAL_RCC_OscConfig+0x10a>
 8000aa4:	6823      	ldr	r3, [r4, #0]
 8000aa6:	4a91      	ldr	r2, [pc, #580]	; (8000cec <HAL_RCC_OscConfig+0x324>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000aa8:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aaa:	4013      	ands	r3, r2
 8000aac:	6023      	str	r3, [r4, #0]
 8000aae:	6823      	ldr	r3, [r4, #0]
 8000ab0:	4a8f      	ldr	r2, [pc, #572]	; (8000cf0 <HAL_RCC_OscConfig+0x328>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ab2:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ab8:	f7ff fbf0 	bl	800029c <HAL_GetTick>
 8000abc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000abe:	6823      	ldr	r3, [r4, #0]
 8000ac0:	4233      	tst	r3, r6
 8000ac2:	d100      	bne.n	8000ac6 <HAL_RCC_OscConfig+0xfe>
 8000ac4:	e786      	b.n	80009d4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ac6:	f7ff fbe9 	bl	800029c <HAL_GetTick>
 8000aca:	1bc0      	subs	r0, r0, r7
 8000acc:	2864      	cmp	r0, #100	; 0x64
 8000ace:	d9f6      	bls.n	8000abe <HAL_RCC_OscConfig+0xf6>
 8000ad0:	e7e4      	b.n	8000a9c <HAL_RCC_OscConfig+0xd4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ad2:	2b05      	cmp	r3, #5
 8000ad4:	d105      	bne.n	8000ae2 <HAL_RCC_OscConfig+0x11a>
 8000ad6:	2380      	movs	r3, #128	; 0x80
 8000ad8:	6822      	ldr	r2, [r4, #0]
 8000ada:	02db      	lsls	r3, r3, #11
 8000adc:	4313      	orrs	r3, r2
 8000ade:	6023      	str	r3, [r4, #0]
 8000ae0:	e7ca      	b.n	8000a78 <HAL_RCC_OscConfig+0xb0>
 8000ae2:	6823      	ldr	r3, [r4, #0]
 8000ae4:	4a81      	ldr	r2, [pc, #516]	; (8000cec <HAL_RCC_OscConfig+0x324>)
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	6023      	str	r3, [r4, #0]
 8000aea:	6823      	ldr	r3, [r4, #0]
 8000aec:	4a80      	ldr	r2, [pc, #512]	; (8000cf0 <HAL_RCC_OscConfig+0x328>)
 8000aee:	4013      	ands	r3, r2
 8000af0:	e7c6      	b.n	8000a80 <HAL_RCC_OscConfig+0xb8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000af2:	220c      	movs	r2, #12
 8000af4:	4c7c      	ldr	r4, [pc, #496]	; (8000ce8 <HAL_RCC_OscConfig+0x320>)
 8000af6:	6863      	ldr	r3, [r4, #4]
 8000af8:	4213      	tst	r3, r2
 8000afa:	d00b      	beq.n	8000b14 <HAL_RCC_OscConfig+0x14c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000afc:	6863      	ldr	r3, [r4, #4]
 8000afe:	4013      	ands	r3, r2
 8000b00:	2b08      	cmp	r3, #8
 8000b02:	d115      	bne.n	8000b30 <HAL_RCC_OscConfig+0x168>
 8000b04:	22c0      	movs	r2, #192	; 0xc0
 8000b06:	6863      	ldr	r3, [r4, #4]
 8000b08:	0252      	lsls	r2, r2, #9
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	2280      	movs	r2, #128	; 0x80
 8000b0e:	0212      	lsls	r2, r2, #8
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d10d      	bne.n	8000b30 <HAL_RCC_OscConfig+0x168>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b14:	6823      	ldr	r3, [r4, #0]
 8000b16:	079b      	lsls	r3, r3, #30
 8000b18:	d502      	bpl.n	8000b20 <HAL_RCC_OscConfig+0x158>
 8000b1a:	68eb      	ldr	r3, [r5, #12]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d1a5      	bne.n	8000a6c <HAL_RCC_OscConfig+0xa4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b20:	21f8      	movs	r1, #248	; 0xf8
 8000b22:	6822      	ldr	r2, [r4, #0]
 8000b24:	692b      	ldr	r3, [r5, #16]
 8000b26:	438a      	bics	r2, r1
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	6023      	str	r3, [r4, #0]
 8000b2e:	e755      	b.n	80009dc <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b30:	68ea      	ldr	r2, [r5, #12]
 8000b32:	2301      	movs	r3, #1
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	d00f      	beq.n	8000b58 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 8000b38:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b3a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b40:	f7ff fbac 	bl	800029c <HAL_GetTick>
 8000b44:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b46:	6823      	ldr	r3, [r4, #0]
 8000b48:	4233      	tst	r3, r6
 8000b4a:	d1e9      	bne.n	8000b20 <HAL_RCC_OscConfig+0x158>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b4c:	f7ff fba6 	bl	800029c <HAL_GetTick>
 8000b50:	1bc0      	subs	r0, r0, r7
 8000b52:	2802      	cmp	r0, #2
 8000b54:	d9f7      	bls.n	8000b46 <HAL_RCC_OscConfig+0x17e>
 8000b56:	e7a1      	b.n	8000a9c <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI_DISABLE();
 8000b58:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b5a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000b5c:	439a      	bics	r2, r3
 8000b5e:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8000b60:	f7ff fb9c 	bl	800029c <HAL_GetTick>
 8000b64:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b66:	6823      	ldr	r3, [r4, #0]
 8000b68:	4233      	tst	r3, r6
 8000b6a:	d100      	bne.n	8000b6e <HAL_RCC_OscConfig+0x1a6>
 8000b6c:	e736      	b.n	80009dc <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b6e:	f7ff fb95 	bl	800029c <HAL_GetTick>
 8000b72:	1bc0      	subs	r0, r0, r7
 8000b74:	2802      	cmp	r0, #2
 8000b76:	d9f6      	bls.n	8000b66 <HAL_RCC_OscConfig+0x19e>
 8000b78:	e790      	b.n	8000a9c <HAL_RCC_OscConfig+0xd4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b7a:	69ea      	ldr	r2, [r5, #28]
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	4c5a      	ldr	r4, [pc, #360]	; (8000ce8 <HAL_RCC_OscConfig+0x320>)
 8000b80:	2a00      	cmp	r2, #0
 8000b82:	d010      	beq.n	8000ba6 <HAL_RCC_OscConfig+0x1de>
      __HAL_RCC_LSI_ENABLE();
 8000b84:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b86:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000b8c:	f7ff fb86 	bl	800029c <HAL_GetTick>
 8000b90:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b94:	4233      	tst	r3, r6
 8000b96:	d000      	beq.n	8000b9a <HAL_RCC_OscConfig+0x1d2>
 8000b98:	e724      	b.n	80009e4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b9a:	f7ff fb7f 	bl	800029c <HAL_GetTick>
 8000b9e:	1bc0      	subs	r0, r0, r7
 8000ba0:	2802      	cmp	r0, #2
 8000ba2:	d9f6      	bls.n	8000b92 <HAL_RCC_OscConfig+0x1ca>
 8000ba4:	e77a      	b.n	8000a9c <HAL_RCC_OscConfig+0xd4>
      __HAL_RCC_LSI_DISABLE();
 8000ba6:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ba8:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000baa:	439a      	bics	r2, r3
 8000bac:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000bae:	f7ff fb75 	bl	800029c <HAL_GetTick>
 8000bb2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000bb6:	4233      	tst	r3, r6
 8000bb8:	d100      	bne.n	8000bbc <HAL_RCC_OscConfig+0x1f4>
 8000bba:	e713      	b.n	80009e4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bbc:	f7ff fb6e 	bl	800029c <HAL_GetTick>
 8000bc0:	1bc0      	subs	r0, r0, r7
 8000bc2:	2802      	cmp	r0, #2
 8000bc4:	d9f6      	bls.n	8000bb4 <HAL_RCC_OscConfig+0x1ec>
 8000bc6:	e769      	b.n	8000a9c <HAL_RCC_OscConfig+0xd4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bc8:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000bca:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bcc:	4c46      	ldr	r4, [pc, #280]	; (8000ce8 <HAL_RCC_OscConfig+0x320>)
 8000bce:	0552      	lsls	r2, r2, #21
 8000bd0:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000bd2:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bd4:	4213      	tst	r3, r2
 8000bd6:	d108      	bne.n	8000bea <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bd8:	69e3      	ldr	r3, [r4, #28]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	61e3      	str	r3, [r4, #28]
 8000bde:	69e3      	ldr	r3, [r4, #28]
 8000be0:	4013      	ands	r3, r2
 8000be2:	9303      	str	r3, [sp, #12]
 8000be4:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000be6:	2301      	movs	r3, #1
 8000be8:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bea:	2780      	movs	r7, #128	; 0x80
 8000bec:	4e41      	ldr	r6, [pc, #260]	; (8000cf4 <HAL_RCC_OscConfig+0x32c>)
 8000bee:	007f      	lsls	r7, r7, #1
 8000bf0:	6833      	ldr	r3, [r6, #0]
 8000bf2:	423b      	tst	r3, r7
 8000bf4:	d006      	beq.n	8000c04 <HAL_RCC_OscConfig+0x23c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bf6:	68ab      	ldr	r3, [r5, #8]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d113      	bne.n	8000c24 <HAL_RCC_OscConfig+0x25c>
 8000bfc:	6a22      	ldr	r2, [r4, #32]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	6223      	str	r3, [r4, #32]
 8000c02:	e030      	b.n	8000c66 <HAL_RCC_OscConfig+0x29e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c04:	6833      	ldr	r3, [r6, #0]
 8000c06:	433b      	orrs	r3, r7
 8000c08:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000c0a:	f7ff fb47 	bl	800029c <HAL_GetTick>
 8000c0e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c10:	6833      	ldr	r3, [r6, #0]
 8000c12:	423b      	tst	r3, r7
 8000c14:	d1ef      	bne.n	8000bf6 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c16:	f7ff fb41 	bl	800029c <HAL_GetTick>
 8000c1a:	9b01      	ldr	r3, [sp, #4]
 8000c1c:	1ac0      	subs	r0, r0, r3
 8000c1e:	2864      	cmp	r0, #100	; 0x64
 8000c20:	d9f6      	bls.n	8000c10 <HAL_RCC_OscConfig+0x248>
 8000c22:	e73b      	b.n	8000a9c <HAL_RCC_OscConfig+0xd4>
 8000c24:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d114      	bne.n	8000c54 <HAL_RCC_OscConfig+0x28c>
 8000c2a:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c2c:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c2e:	4393      	bics	r3, r2
 8000c30:	6223      	str	r3, [r4, #32]
 8000c32:	6a23      	ldr	r3, [r4, #32]
 8000c34:	3203      	adds	r2, #3
 8000c36:	4393      	bics	r3, r2
 8000c38:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000c3a:	f7ff fb2f 	bl	800029c <HAL_GetTick>
 8000c3e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c40:	6a23      	ldr	r3, [r4, #32]
 8000c42:	423b      	tst	r3, r7
 8000c44:	d025      	beq.n	8000c92 <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c46:	f7ff fb29 	bl	800029c <HAL_GetTick>
 8000c4a:	4b2b      	ldr	r3, [pc, #172]	; (8000cf8 <HAL_RCC_OscConfig+0x330>)
 8000c4c:	1b80      	subs	r0, r0, r6
 8000c4e:	4298      	cmp	r0, r3
 8000c50:	d9f6      	bls.n	8000c40 <HAL_RCC_OscConfig+0x278>
 8000c52:	e723      	b.n	8000a9c <HAL_RCC_OscConfig+0xd4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c54:	2b05      	cmp	r3, #5
 8000c56:	d10b      	bne.n	8000c70 <HAL_RCC_OscConfig+0x2a8>
 8000c58:	6a21      	ldr	r1, [r4, #32]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	430b      	orrs	r3, r1
 8000c5e:	6223      	str	r3, [r4, #32]
 8000c60:	6a23      	ldr	r3, [r4, #32]
 8000c62:	431a      	orrs	r2, r3
 8000c64:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8000c66:	f7ff fb19 	bl	800029c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c6a:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000c6c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c6e:	e00d      	b.n	8000c8c <HAL_RCC_OscConfig+0x2c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c70:	6a23      	ldr	r3, [r4, #32]
 8000c72:	4393      	bics	r3, r2
 8000c74:	2204      	movs	r2, #4
 8000c76:	6223      	str	r3, [r4, #32]
 8000c78:	6a23      	ldr	r3, [r4, #32]
 8000c7a:	4393      	bics	r3, r2
 8000c7c:	e7c0      	b.n	8000c00 <HAL_RCC_OscConfig+0x238>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c7e:	f7ff fb0d 	bl	800029c <HAL_GetTick>
 8000c82:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <HAL_RCC_OscConfig+0x330>)
 8000c84:	1b80      	subs	r0, r0, r6
 8000c86:	4298      	cmp	r0, r3
 8000c88:	d900      	bls.n	8000c8c <HAL_RCC_OscConfig+0x2c4>
 8000c8a:	e707      	b.n	8000a9c <HAL_RCC_OscConfig+0xd4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c8c:	6a23      	ldr	r3, [r4, #32]
 8000c8e:	423b      	tst	r3, r7
 8000c90:	d0f5      	beq.n	8000c7e <HAL_RCC_OscConfig+0x2b6>
    if(pwrclkchanged == SET)
 8000c92:	9b00      	ldr	r3, [sp, #0]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d000      	beq.n	8000c9a <HAL_RCC_OscConfig+0x2d2>
 8000c98:	e6a8      	b.n	80009ec <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c9a:	69e3      	ldr	r3, [r4, #28]
 8000c9c:	4a17      	ldr	r2, [pc, #92]	; (8000cfc <HAL_RCC_OscConfig+0x334>)
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	61e3      	str	r3, [r4, #28]
 8000ca2:	e6a3      	b.n	80009ec <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000ca4:	f7ff fafa 	bl	800029c <HAL_GetTick>
 8000ca8:	1bc0      	subs	r0, r0, r7
 8000caa:	2802      	cmp	r0, #2
 8000cac:	d800      	bhi.n	8000cb0 <HAL_RCC_OscConfig+0x2e8>
 8000cae:	e6b0      	b.n	8000a12 <HAL_RCC_OscConfig+0x4a>
 8000cb0:	e6f4      	b.n	8000a9c <HAL_RCC_OscConfig+0xd4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000cb2:	3205      	adds	r2, #5
 8000cb4:	d103      	bne.n	8000cbe <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000cb6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000cb8:	439a      	bics	r2, r3
 8000cba:	6362      	str	r2, [r4, #52]	; 0x34
 8000cbc:	e6ad      	b.n	8000a1a <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000cbe:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000cc0:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000cc2:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000cc4:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000cc6:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000cc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000cca:	4393      	bics	r3, r2
 8000ccc:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000cce:	f7ff fae5 	bl	800029c <HAL_GetTick>
 8000cd2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000cd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000cd6:	4233      	tst	r3, r6
 8000cd8:	d100      	bne.n	8000cdc <HAL_RCC_OscConfig+0x314>
 8000cda:	e6a5      	b.n	8000a28 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000cdc:	f7ff fade 	bl	800029c <HAL_GetTick>
 8000ce0:	1bc0      	subs	r0, r0, r7
 8000ce2:	2802      	cmp	r0, #2
 8000ce4:	d9f6      	bls.n	8000cd4 <HAL_RCC_OscConfig+0x30c>
 8000ce6:	e6d9      	b.n	8000a9c <HAL_RCC_OscConfig+0xd4>
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	fffeffff 	.word	0xfffeffff
 8000cf0:	fffbffff 	.word	0xfffbffff
 8000cf4:	40007000 	.word	0x40007000
 8000cf8:	00001388 	.word	0x00001388
 8000cfc:	efffffff 	.word	0xefffffff
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000d00:	210c      	movs	r1, #12
 8000d02:	4c46      	ldr	r4, [pc, #280]	; (8000e1c <HAL_RCC_OscConfig+0x454>)
 8000d04:	6862      	ldr	r2, [r4, #4]
 8000d06:	400a      	ands	r2, r1
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	d009      	beq.n	8000d20 <HAL_RCC_OscConfig+0x358>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000d0c:	6863      	ldr	r3, [r4, #4]
 8000d0e:	400b      	ands	r3, r1
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000d10:	2b08      	cmp	r3, #8
 8000d12:	d10e      	bne.n	8000d32 <HAL_RCC_OscConfig+0x36a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000d14:	22c0      	movs	r2, #192	; 0xc0
 8000d16:	6863      	ldr	r3, [r4, #4]
 8000d18:	0252      	lsls	r2, r2, #9
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d108      	bne.n	8000d32 <HAL_RCC_OscConfig+0x36a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000d20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d22:	03db      	lsls	r3, r3, #15
 8000d24:	d400      	bmi.n	8000d28 <HAL_RCC_OscConfig+0x360>
 8000d26:	e683      	b.n	8000a30 <HAL_RCC_OscConfig+0x68>
 8000d28:	6a2b      	ldr	r3, [r5, #32]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d000      	beq.n	8000d30 <HAL_RCC_OscConfig+0x368>
 8000d2e:	e69d      	b.n	8000a6c <HAL_RCC_OscConfig+0xa4>
 8000d30:	e67e      	b.n	8000a30 <HAL_RCC_OscConfig+0x68>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000d32:	6a2b      	ldr	r3, [r5, #32]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d011      	beq.n	8000d5c <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_HSI48_ENABLE();
 8000d38:	2680      	movs	r6, #128	; 0x80
 8000d3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d3c:	0276      	lsls	r6, r6, #9
 8000d3e:	4333      	orrs	r3, r6
 8000d40:	6363      	str	r3, [r4, #52]	; 0x34
        tickstart = HAL_GetTick();
 8000d42:	f7ff faab 	bl	800029c <HAL_GetTick>
 8000d46:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000d48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d4a:	4233      	tst	r3, r6
 8000d4c:	d000      	beq.n	8000d50 <HAL_RCC_OscConfig+0x388>
 8000d4e:	e66f      	b.n	8000a30 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000d50:	f7ff faa4 	bl	800029c <HAL_GetTick>
 8000d54:	1bc0      	subs	r0, r0, r7
 8000d56:	2802      	cmp	r0, #2
 8000d58:	d9f6      	bls.n	8000d48 <HAL_RCC_OscConfig+0x380>
 8000d5a:	e69f      	b.n	8000a9c <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI48_DISABLE();
 8000d5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d5e:	4a30      	ldr	r2, [pc, #192]	; (8000e20 <HAL_RCC_OscConfig+0x458>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000d60:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 8000d62:	4013      	ands	r3, r2
 8000d64:	6363      	str	r3, [r4, #52]	; 0x34
        tickstart = HAL_GetTick();
 8000d66:	f7ff fa99 	bl	800029c <HAL_GetTick>
 8000d6a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000d6c:	0276      	lsls	r6, r6, #9
 8000d6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d70:	4233      	tst	r3, r6
 8000d72:	d100      	bne.n	8000d76 <HAL_RCC_OscConfig+0x3ae>
 8000d74:	e65c      	b.n	8000a30 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000d76:	f7ff fa91 	bl	800029c <HAL_GetTick>
 8000d7a:	1bc0      	subs	r0, r0, r7
 8000d7c:	2802      	cmp	r0, #2
 8000d7e:	d9f6      	bls.n	8000d6e <HAL_RCC_OscConfig+0x3a6>
 8000d80:	e68c      	b.n	8000a9c <HAL_RCC_OscConfig+0xd4>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d82:	220c      	movs	r2, #12
 8000d84:	4c25      	ldr	r4, [pc, #148]	; (8000e1c <HAL_RCC_OscConfig+0x454>)
 8000d86:	6863      	ldr	r3, [r4, #4]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	2b08      	cmp	r3, #8
 8000d8c:	d100      	bne.n	8000d90 <HAL_RCC_OscConfig+0x3c8>
 8000d8e:	e66d      	b.n	8000a6c <HAL_RCC_OscConfig+0xa4>
        __HAL_RCC_PLL_DISABLE();
 8000d90:	6823      	ldr	r3, [r4, #0]
 8000d92:	4a24      	ldr	r2, [pc, #144]	; (8000e24 <HAL_RCC_OscConfig+0x45c>)
 8000d94:	4013      	ands	r3, r2
 8000d96:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d98:	2902      	cmp	r1, #2
 8000d9a:	d12f      	bne.n	8000dfc <HAL_RCC_OscConfig+0x434>
        tickstart = HAL_GetTick();
 8000d9c:	f7ff fa7e 	bl	800029c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000da0:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000da2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000da4:	04b6      	lsls	r6, r6, #18
 8000da6:	6823      	ldr	r3, [r4, #0]
 8000da8:	4233      	tst	r3, r6
 8000daa:	d121      	bne.n	8000df0 <HAL_RCC_OscConfig+0x428>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000dac:	220f      	movs	r2, #15
 8000dae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000db0:	4393      	bics	r3, r2
 8000db2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000db4:	4313      	orrs	r3, r2
 8000db6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000db8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8000dba:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000dbc:	6862      	ldr	r2, [r4, #4]
 8000dbe:	430b      	orrs	r3, r1
 8000dc0:	4919      	ldr	r1, [pc, #100]	; (8000e28 <HAL_RCC_OscConfig+0x460>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000dc2:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000dc4:	400a      	ands	r2, r1
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000dca:	2380      	movs	r3, #128	; 0x80
 8000dcc:	6822      	ldr	r2, [r4, #0]
 8000dce:	045b      	lsls	r3, r3, #17
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000dd4:	f7ff fa62 	bl	800029c <HAL_GetTick>
 8000dd8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000dda:	04ad      	lsls	r5, r5, #18
 8000ddc:	6823      	ldr	r3, [r4, #0]
 8000dde:	422b      	tst	r3, r5
 8000de0:	d000      	beq.n	8000de4 <HAL_RCC_OscConfig+0x41c>
 8000de2:	e629      	b.n	8000a38 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000de4:	f7ff fa5a 	bl	800029c <HAL_GetTick>
 8000de8:	1b80      	subs	r0, r0, r6
 8000dea:	2802      	cmp	r0, #2
 8000dec:	d9f6      	bls.n	8000ddc <HAL_RCC_OscConfig+0x414>
 8000dee:	e655      	b.n	8000a9c <HAL_RCC_OscConfig+0xd4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000df0:	f7ff fa54 	bl	800029c <HAL_GetTick>
 8000df4:	1bc0      	subs	r0, r0, r7
 8000df6:	2802      	cmp	r0, #2
 8000df8:	d9d5      	bls.n	8000da6 <HAL_RCC_OscConfig+0x3de>
 8000dfa:	e64f      	b.n	8000a9c <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 8000dfc:	f7ff fa4e 	bl	800029c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e00:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000e02:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e04:	04ad      	lsls	r5, r5, #18
 8000e06:	6823      	ldr	r3, [r4, #0]
 8000e08:	422b      	tst	r3, r5
 8000e0a:	d100      	bne.n	8000e0e <HAL_RCC_OscConfig+0x446>
 8000e0c:	e614      	b.n	8000a38 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e0e:	f7ff fa45 	bl	800029c <HAL_GetTick>
 8000e12:	1b80      	subs	r0, r0, r6
 8000e14:	2802      	cmp	r0, #2
 8000e16:	d9f6      	bls.n	8000e06 <HAL_RCC_OscConfig+0x43e>
 8000e18:	e640      	b.n	8000a9c <HAL_RCC_OscConfig+0xd4>
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	fffeffff 	.word	0xfffeffff
 8000e24:	feffffff 	.word	0xfeffffff
 8000e28:	ffc27fff 	.word	0xffc27fff

08000e2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e2c:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000e2e:	4c1c      	ldr	r4, [pc, #112]	; (8000ea0 <HAL_RCC_GetSysClockFreq+0x74>)
{
 8000e30:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000e32:	2210      	movs	r2, #16
 8000e34:	0021      	movs	r1, r4
 8000e36:	4668      	mov	r0, sp
 8000e38:	f001 fa1e 	bl	8002278 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000e3c:	0021      	movs	r1, r4
 8000e3e:	ad04      	add	r5, sp, #16
 8000e40:	2210      	movs	r2, #16
 8000e42:	3110      	adds	r1, #16
 8000e44:	0028      	movs	r0, r5
 8000e46:	f001 fa17 	bl	8002278 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e4a:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000e4c:	4e15      	ldr	r6, [pc, #84]	; (8000ea4 <HAL_RCC_GetSysClockFreq+0x78>)
 8000e4e:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000e50:	401a      	ands	r2, r3
 8000e52:	2a08      	cmp	r2, #8
 8000e54:	d008      	beq.n	8000e68 <HAL_RCC_GetSysClockFreq+0x3c>
 8000e56:	2a0c      	cmp	r2, #12
 8000e58:	d003      	beq.n	8000e62 <HAL_RCC_GetSysClockFreq+0x36>
 8000e5a:	2a04      	cmp	r2, #4
 8000e5c:	d11e      	bne.n	8000e9c <HAL_RCC_GetSysClockFreq+0x70>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e5e:	4812      	ldr	r0, [pc, #72]	; (8000ea8 <HAL_RCC_GetSysClockFreq+0x7c>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8000e60:	e000      	b.n	8000e64 <HAL_RCC_GetSysClockFreq+0x38>
      sysclockfreq = HSI48_VALUE;
 8000e62:	4812      	ldr	r0, [pc, #72]	; (8000eac <HAL_RCC_GetSysClockFreq+0x80>)
}
 8000e64:	b008      	add	sp, #32
 8000e66:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000e68:	200f      	movs	r0, #15
 8000e6a:	466a      	mov	r2, sp
 8000e6c:	0c99      	lsrs	r1, r3, #18
 8000e6e:	4001      	ands	r1, r0
 8000e70:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000e72:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8000e74:	4002      	ands	r2, r0
 8000e76:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000e78:	22c0      	movs	r2, #192	; 0xc0
 8000e7a:	2080      	movs	r0, #128	; 0x80
 8000e7c:	0252      	lsls	r2, r2, #9
 8000e7e:	4013      	ands	r3, r2
 8000e80:	0240      	lsls	r0, r0, #9
 8000e82:	4283      	cmp	r3, r0
 8000e84:	d104      	bne.n	8000e90 <HAL_RCC_GetSysClockFreq+0x64>
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000e86:	4808      	ldr	r0, [pc, #32]	; (8000ea8 <HAL_RCC_GetSysClockFreq+0x7c>)
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000e88:	f7ff f952 	bl	8000130 <__udivsi3>
 8000e8c:	4360      	muls	r0, r4
 8000e8e:	e7e9      	b.n	8000e64 <HAL_RCC_GetSysClockFreq+0x38>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d101      	bne.n	8000e98 <HAL_RCC_GetSysClockFreq+0x6c>
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 8000e94:	4805      	ldr	r0, [pc, #20]	; (8000eac <HAL_RCC_GetSysClockFreq+0x80>)
 8000e96:	e7f7      	b.n	8000e88 <HAL_RCC_GetSysClockFreq+0x5c>
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000e98:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <HAL_RCC_GetSysClockFreq+0x84>)
 8000e9a:	e7f5      	b.n	8000e88 <HAL_RCC_GetSysClockFreq+0x5c>
      sysclockfreq = HSI_VALUE;
 8000e9c:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <HAL_RCC_GetSysClockFreq+0x84>)
      break;
 8000e9e:	e7e1      	b.n	8000e64 <HAL_RCC_GetSysClockFreq+0x38>
 8000ea0:	080022a4 	.word	0x080022a4
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	00989680 	.word	0x00989680
 8000eac:	02dc6c00 	.word	0x02dc6c00
 8000eb0:	007a1200 	.word	0x007a1200

08000eb4 <HAL_RCC_ClockConfig>:
{
 8000eb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	4c4f      	ldr	r4, [pc, #316]	; (8000ff8 <HAL_RCC_ClockConfig+0x144>)
{
 8000eba:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ebc:	6823      	ldr	r3, [r4, #0]
{
 8000ebe:	9101      	str	r1, [sp, #4]
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d31f      	bcc.n	8000f06 <HAL_RCC_ClockConfig+0x52>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ec6:	6832      	ldr	r2, [r6, #0]
 8000ec8:	0793      	lsls	r3, r2, #30
 8000eca:	d428      	bmi.n	8000f1e <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ecc:	07d3      	lsls	r3, r2, #31
 8000ece:	d42e      	bmi.n	8000f2e <HAL_RCC_ClockConfig+0x7a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	6822      	ldr	r2, [r4, #0]
 8000ed4:	9901      	ldr	r1, [sp, #4]
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	4291      	cmp	r1, r2
 8000eda:	d200      	bcs.n	8000ede <HAL_RCC_ClockConfig+0x2a>
 8000edc:	e07e      	b.n	8000fdc <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ede:	6833      	ldr	r3, [r6, #0]
 8000ee0:	4c46      	ldr	r4, [pc, #280]	; (8000ffc <HAL_RCC_ClockConfig+0x148>)
 8000ee2:	075b      	lsls	r3, r3, #29
 8000ee4:	d500      	bpl.n	8000ee8 <HAL_RCC_ClockConfig+0x34>
 8000ee6:	e080      	b.n	8000fea <HAL_RCC_ClockConfig+0x136>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000ee8:	f7ff ffa0 	bl	8000e2c <HAL_RCC_GetSysClockFreq>
 8000eec:	6863      	ldr	r3, [r4, #4]
 8000eee:	4a44      	ldr	r2, [pc, #272]	; (8001000 <HAL_RCC_ClockConfig+0x14c>)
 8000ef0:	061b      	lsls	r3, r3, #24
 8000ef2:	0f1b      	lsrs	r3, r3, #28
 8000ef4:	5cd3      	ldrb	r3, [r2, r3]
 8000ef6:	40d8      	lsrs	r0, r3
 8000ef8:	4b42      	ldr	r3, [pc, #264]	; (8001004 <HAL_RCC_ClockConfig+0x150>)
 8000efa:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000efc:	2000      	movs	r0, #0
 8000efe:	f7ff f9a3 	bl	8000248 <HAL_InitTick>
  return HAL_OK;
 8000f02:	2000      	movs	r0, #0
 8000f04:	e00a      	b.n	8000f1c <HAL_RCC_ClockConfig+0x68>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f06:	6823      	ldr	r3, [r4, #0]
 8000f08:	9901      	ldr	r1, [sp, #4]
 8000f0a:	4393      	bics	r3, r2
 8000f0c:	430b      	orrs	r3, r1
 8000f0e:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f10:	6823      	ldr	r3, [r4, #0]
 8000f12:	4013      	ands	r3, r2
 8000f14:	9a01      	ldr	r2, [sp, #4]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d0d5      	beq.n	8000ec6 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000f1a:	2001      	movs	r0, #1
}
 8000f1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f1e:	20f0      	movs	r0, #240	; 0xf0
 8000f20:	4936      	ldr	r1, [pc, #216]	; (8000ffc <HAL_RCC_ClockConfig+0x148>)
 8000f22:	684b      	ldr	r3, [r1, #4]
 8000f24:	4383      	bics	r3, r0
 8000f26:	68b0      	ldr	r0, [r6, #8]
 8000f28:	4303      	orrs	r3, r0
 8000f2a:	604b      	str	r3, [r1, #4]
 8000f2c:	e7ce      	b.n	8000ecc <HAL_RCC_ClockConfig+0x18>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f2e:	6872      	ldr	r2, [r6, #4]
 8000f30:	4d32      	ldr	r5, [pc, #200]	; (8000ffc <HAL_RCC_ClockConfig+0x148>)
 8000f32:	2a01      	cmp	r2, #1
 8000f34:	d11a      	bne.n	8000f6c <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f36:	682b      	ldr	r3, [r5, #0]
 8000f38:	039b      	lsls	r3, r3, #14
 8000f3a:	d5ee      	bpl.n	8000f1a <HAL_RCC_ClockConfig+0x66>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f3c:	2103      	movs	r1, #3
 8000f3e:	686b      	ldr	r3, [r5, #4]
 8000f40:	438b      	bics	r3, r1
 8000f42:	4313      	orrs	r3, r2
 8000f44:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000f46:	f7ff f9a9 	bl	800029c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f4a:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000f4c:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d11c      	bne.n	8000f8c <HAL_RCC_ClockConfig+0xd8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f52:	220c      	movs	r2, #12
 8000f54:	686b      	ldr	r3, [r5, #4]
 8000f56:	4013      	ands	r3, r2
 8000f58:	2b04      	cmp	r3, #4
 8000f5a:	d0b9      	beq.n	8000ed0 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f5c:	f7ff f99e 	bl	800029c <HAL_GetTick>
 8000f60:	4b29      	ldr	r3, [pc, #164]	; (8001008 <HAL_RCC_ClockConfig+0x154>)
 8000f62:	1bc0      	subs	r0, r0, r7
 8000f64:	4298      	cmp	r0, r3
 8000f66:	d9f4      	bls.n	8000f52 <HAL_RCC_ClockConfig+0x9e>
          return HAL_TIMEOUT;
 8000f68:	2003      	movs	r0, #3
 8000f6a:	e7d7      	b.n	8000f1c <HAL_RCC_ClockConfig+0x68>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f6c:	2a02      	cmp	r2, #2
 8000f6e:	d103      	bne.n	8000f78 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f70:	682b      	ldr	r3, [r5, #0]
 8000f72:	019b      	lsls	r3, r3, #6
 8000f74:	d4e2      	bmi.n	8000f3c <HAL_RCC_ClockConfig+0x88>
 8000f76:	e7d0      	b.n	8000f1a <HAL_RCC_ClockConfig+0x66>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8000f78:	2a03      	cmp	r2, #3
 8000f7a:	d103      	bne.n	8000f84 <HAL_RCC_ClockConfig+0xd0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000f7c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000f7e:	03db      	lsls	r3, r3, #15
 8000f80:	d4dc      	bmi.n	8000f3c <HAL_RCC_ClockConfig+0x88>
 8000f82:	e7ca      	b.n	8000f1a <HAL_RCC_ClockConfig+0x66>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f84:	682b      	ldr	r3, [r5, #0]
 8000f86:	079b      	lsls	r3, r3, #30
 8000f88:	d4d8      	bmi.n	8000f3c <HAL_RCC_ClockConfig+0x88>
 8000f8a:	e7c6      	b.n	8000f1a <HAL_RCC_ClockConfig+0x66>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d10b      	bne.n	8000fa8 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f90:	220c      	movs	r2, #12
 8000f92:	686b      	ldr	r3, [r5, #4]
 8000f94:	4013      	ands	r3, r2
 8000f96:	2b08      	cmp	r3, #8
 8000f98:	d09a      	beq.n	8000ed0 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f9a:	f7ff f97f 	bl	800029c <HAL_GetTick>
 8000f9e:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <HAL_RCC_ClockConfig+0x154>)
 8000fa0:	1bc0      	subs	r0, r0, r7
 8000fa2:	4298      	cmp	r0, r3
 8000fa4:	d9f4      	bls.n	8000f90 <HAL_RCC_ClockConfig+0xdc>
 8000fa6:	e7df      	b.n	8000f68 <HAL_RCC_ClockConfig+0xb4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8000fa8:	2b03      	cmp	r3, #3
 8000faa:	d011      	beq.n	8000fd0 <HAL_RCC_ClockConfig+0x11c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fac:	220c      	movs	r2, #12
 8000fae:	686b      	ldr	r3, [r5, #4]
 8000fb0:	4213      	tst	r3, r2
 8000fb2:	d100      	bne.n	8000fb6 <HAL_RCC_ClockConfig+0x102>
 8000fb4:	e78c      	b.n	8000ed0 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fb6:	f7ff f971 	bl	800029c <HAL_GetTick>
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_RCC_ClockConfig+0x154>)
 8000fbc:	1bc0      	subs	r0, r0, r7
 8000fbe:	4298      	cmp	r0, r3
 8000fc0:	d9f4      	bls.n	8000fac <HAL_RCC_ClockConfig+0xf8>
 8000fc2:	e7d1      	b.n	8000f68 <HAL_RCC_ClockConfig+0xb4>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fc4:	f7ff f96a 	bl	800029c <HAL_GetTick>
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <HAL_RCC_ClockConfig+0x154>)
 8000fca:	1bc0      	subs	r0, r0, r7
 8000fcc:	4298      	cmp	r0, r3
 8000fce:	d8cb      	bhi.n	8000f68 <HAL_RCC_ClockConfig+0xb4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8000fd0:	220c      	movs	r2, #12
 8000fd2:	686b      	ldr	r3, [r5, #4]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d1f4      	bne.n	8000fc4 <HAL_RCC_ClockConfig+0x110>
 8000fda:	e779      	b.n	8000ed0 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fdc:	6822      	ldr	r2, [r4, #0]
 8000fde:	439a      	bics	r2, r3
 8000fe0:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000fe2:	6822      	ldr	r2, [r4, #0]
 8000fe4:	421a      	tst	r2, r3
 8000fe6:	d198      	bne.n	8000f1a <HAL_RCC_ClockConfig+0x66>
 8000fe8:	e779      	b.n	8000ede <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000fea:	6863      	ldr	r3, [r4, #4]
 8000fec:	4a07      	ldr	r2, [pc, #28]	; (800100c <HAL_RCC_ClockConfig+0x158>)
 8000fee:	4013      	ands	r3, r2
 8000ff0:	68f2      	ldr	r2, [r6, #12]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	6063      	str	r3, [r4, #4]
 8000ff6:	e777      	b.n	8000ee8 <HAL_RCC_ClockConfig+0x34>
 8000ff8:	40022000 	.word	0x40022000
 8000ffc:	40021000 	.word	0x40021000
 8001000:	080022c8 	.word	0x080022c8
 8001004:	20000000 	.word	0x20000000
 8001008:	00001388 	.word	0x00001388
 800100c:	fffff8ff 	.word	0xfffff8ff

08001010 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001010:	4b01      	ldr	r3, [pc, #4]	; (8001018 <HAL_RCC_GetHCLKFreq+0x8>)
 8001012:	6818      	ldr	r0, [r3, #0]
}
 8001014:	4770      	bx	lr
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	20000000 	.word	0x20000000

0800101c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800101c:	4b04      	ldr	r3, [pc, #16]	; (8001030 <HAL_RCC_GetPCLK1Freq+0x14>)
 800101e:	4a05      	ldr	r2, [pc, #20]	; (8001034 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	055b      	lsls	r3, r3, #21
 8001024:	0f5b      	lsrs	r3, r3, #29
 8001026:	5cd3      	ldrb	r3, [r2, r3]
 8001028:	4a03      	ldr	r2, [pc, #12]	; (8001038 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800102a:	6810      	ldr	r0, [r2, #0]
 800102c:	40d8      	lsrs	r0, r3
}    
 800102e:	4770      	bx	lr
 8001030:	40021000 	.word	0x40021000
 8001034:	080022d8 	.word	0x080022d8
 8001038:	20000000 	.word	0x20000000

0800103c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800103c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800103e:	6803      	ldr	r3, [r0, #0]
{
 8001040:	b085      	sub	sp, #20
 8001042:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001044:	03db      	lsls	r3, r3, #15
 8001046:	d528      	bpl.n	800109a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001048:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800104a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800104c:	4c40      	ldr	r4, [pc, #256]	; (8001150 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800104e:	0552      	lsls	r2, r2, #21
 8001050:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001052:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001054:	4213      	tst	r3, r2
 8001056:	d108      	bne.n	800106a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001058:	69e3      	ldr	r3, [r4, #28]
 800105a:	4313      	orrs	r3, r2
 800105c:	61e3      	str	r3, [r4, #28]
 800105e:	69e3      	ldr	r3, [r4, #28]
 8001060:	4013      	ands	r3, r2
 8001062:	9303      	str	r3, [sp, #12]
 8001064:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001066:	2301      	movs	r3, #1
 8001068:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800106a:	2780      	movs	r7, #128	; 0x80
 800106c:	4e39      	ldr	r6, [pc, #228]	; (8001154 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 800106e:	007f      	lsls	r7, r7, #1
 8001070:	6833      	ldr	r3, [r6, #0]
 8001072:	423b      	tst	r3, r7
 8001074:	d038      	beq.n	80010e8 <HAL_RCCEx_PeriphCLKConfig+0xac>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001076:	22c0      	movs	r2, #192	; 0xc0
 8001078:	6a23      	ldr	r3, [r4, #32]
 800107a:	0092      	lsls	r2, r2, #2
 800107c:	4013      	ands	r3, r2
 800107e:	4e36      	ldr	r6, [pc, #216]	; (8001158 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001080:	d144      	bne.n	800110c <HAL_RCCEx_PeriphCLKConfig+0xd0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001082:	6a23      	ldr	r3, [r4, #32]
 8001084:	401e      	ands	r6, r3
 8001086:	686b      	ldr	r3, [r5, #4]
 8001088:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800108a:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800108c:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 800108e:	2b01      	cmp	r3, #1
 8001090:	d103      	bne.n	800109a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001092:	69e3      	ldr	r3, [r4, #28]
 8001094:	4a31      	ldr	r2, [pc, #196]	; (800115c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8001096:	4013      	ands	r3, r2
 8001098:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800109a:	682a      	ldr	r2, [r5, #0]
 800109c:	07d3      	lsls	r3, r2, #31
 800109e:	d506      	bpl.n	80010ae <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80010a0:	2003      	movs	r0, #3
 80010a2:	492b      	ldr	r1, [pc, #172]	; (8001150 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80010a4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80010a6:	4383      	bics	r3, r0
 80010a8:	68a8      	ldr	r0, [r5, #8]
 80010aa:	4303      	orrs	r3, r0
 80010ac:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80010ae:	0693      	lsls	r3, r2, #26
 80010b0:	d506      	bpl.n	80010c0 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80010b2:	2010      	movs	r0, #16
 80010b4:	4926      	ldr	r1, [pc, #152]	; (8001150 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80010b6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80010b8:	4383      	bics	r3, r0
 80010ba:	68e8      	ldr	r0, [r5, #12]
 80010bc:	4303      	orrs	r3, r0
 80010be:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80010c0:	0393      	lsls	r3, r2, #14
 80010c2:	d506      	bpl.n	80010d2 <HAL_RCCEx_PeriphCLKConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80010c4:	2080      	movs	r0, #128	; 0x80
 80010c6:	4922      	ldr	r1, [pc, #136]	; (8001150 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80010c8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80010ca:	4383      	bics	r3, r0
 80010cc:	6968      	ldr	r0, [r5, #20]
 80010ce:	4303      	orrs	r3, r0
 80010d0:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80010d2:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80010d4:	0553      	lsls	r3, r2, #21
 80010d6:	d517      	bpl.n	8001108 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80010d8:	2140      	movs	r1, #64	; 0x40
 80010da:	4a1d      	ldr	r2, [pc, #116]	; (8001150 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80010dc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80010de:	438b      	bics	r3, r1
 80010e0:	6929      	ldr	r1, [r5, #16]
 80010e2:	430b      	orrs	r3, r1
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	e00f      	b.n	8001108 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010e8:	6833      	ldr	r3, [r6, #0]
 80010ea:	433b      	orrs	r3, r7
 80010ec:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80010ee:	f7ff f8d5 	bl	800029c <HAL_GetTick>
 80010f2:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f4:	6833      	ldr	r3, [r6, #0]
 80010f6:	423b      	tst	r3, r7
 80010f8:	d1bd      	bne.n	8001076 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010fa:	f7ff f8cf 	bl	800029c <HAL_GetTick>
 80010fe:	9b01      	ldr	r3, [sp, #4]
 8001100:	1ac0      	subs	r0, r0, r3
 8001102:	2864      	cmp	r0, #100	; 0x64
 8001104:	d9f6      	bls.n	80010f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
          return HAL_TIMEOUT;
 8001106:	2003      	movs	r0, #3
}
 8001108:	b005      	add	sp, #20
 800110a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800110c:	6869      	ldr	r1, [r5, #4]
 800110e:	400a      	ands	r2, r1
 8001110:	4293      	cmp	r3, r2
 8001112:	d0b6      	beq.n	8001082 <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001114:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001116:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001118:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800111a:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 800111c:	025b      	lsls	r3, r3, #9
 800111e:	4303      	orrs	r3, r0
 8001120:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001122:	6a23      	ldr	r3, [r4, #32]
 8001124:	480e      	ldr	r0, [pc, #56]	; (8001160 <HAL_RCCEx_PeriphCLKConfig+0x124>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001126:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001128:	4003      	ands	r3, r0
 800112a:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 800112c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800112e:	07d3      	lsls	r3, r2, #31
 8001130:	d5a7      	bpl.n	8001082 <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8001132:	f7ff f8b3 	bl	800029c <HAL_GetTick>
 8001136:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001138:	2202      	movs	r2, #2
 800113a:	6a23      	ldr	r3, [r4, #32]
 800113c:	4213      	tst	r3, r2
 800113e:	d1a0      	bne.n	8001082 <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001140:	f7ff f8ac 	bl	800029c <HAL_GetTick>
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8001146:	1bc0      	subs	r0, r0, r7
 8001148:	4298      	cmp	r0, r3
 800114a:	d9f5      	bls.n	8001138 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 800114c:	e7db      	b.n	8001106 <HAL_RCCEx_PeriphCLKConfig+0xca>
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	40021000 	.word	0x40021000
 8001154:	40007000 	.word	0x40007000
 8001158:	fffffcff 	.word	0xfffffcff
 800115c:	efffffff 	.word	0xefffffff
 8001160:	fffeffff 	.word	0xfffeffff
 8001164:	00001388 	.word	0x00001388

08001168 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001168:	2201      	movs	r2, #1
 800116a:	6a03      	ldr	r3, [r0, #32]
{
 800116c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800116e:	4393      	bics	r3, r2
 8001170:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001172:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001174:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001176:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001178:	3272      	adds	r2, #114	; 0x72
 800117a:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800117c:	680a      	ldr	r2, [r1, #0]
 800117e:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001180:	2202      	movs	r2, #2
 8001182:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001184:	688a      	ldr	r2, [r1, #8]
 8001186:	4313      	orrs	r3, r2

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001188:	4a11      	ldr	r2, [pc, #68]	; (80011d0 <TIM_OC1_SetConfig+0x68>)
 800118a:	4290      	cmp	r0, r2
 800118c:	d005      	beq.n	800119a <TIM_OC1_SetConfig+0x32>
 800118e:	4e11      	ldr	r6, [pc, #68]	; (80011d4 <TIM_OC1_SetConfig+0x6c>)
 8001190:	42b0      	cmp	r0, r6
 8001192:	d002      	beq.n	800119a <TIM_OC1_SetConfig+0x32>
 8001194:	4e10      	ldr	r6, [pc, #64]	; (80011d8 <TIM_OC1_SetConfig+0x70>)
 8001196:	42b0      	cmp	r0, r6
 8001198:	d113      	bne.n	80011c2 <TIM_OC1_SetConfig+0x5a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800119a:	2608      	movs	r6, #8
 800119c:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800119e:	68ce      	ldr	r6, [r1, #12]
 80011a0:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80011a2:	2604      	movs	r6, #4
 80011a4:	43b3      	bics	r3, r6
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80011a6:	4290      	cmp	r0, r2
 80011a8:	d005      	beq.n	80011b6 <TIM_OC1_SetConfig+0x4e>
 80011aa:	4a0a      	ldr	r2, [pc, #40]	; (80011d4 <TIM_OC1_SetConfig+0x6c>)
 80011ac:	4290      	cmp	r0, r2
 80011ae:	d002      	beq.n	80011b6 <TIM_OC1_SetConfig+0x4e>
 80011b0:	4a09      	ldr	r2, [pc, #36]	; (80011d8 <TIM_OC1_SetConfig+0x70>)
 80011b2:	4290      	cmp	r0, r2
 80011b4:	d105      	bne.n	80011c2 <TIM_OC1_SetConfig+0x5a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80011b6:	4a09      	ldr	r2, [pc, #36]	; (80011dc <TIM_OC1_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80011b8:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80011ba:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 80011bc:	694c      	ldr	r4, [r1, #20]
 80011be:	4334      	orrs	r4, r6
 80011c0:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80011c2:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80011c4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80011c6:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80011c8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80011ca:	6203      	str	r3, [r0, #32]
}
 80011cc:	bd70      	pop	{r4, r5, r6, pc}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	40012c00 	.word	0x40012c00
 80011d4:	40014400 	.word	0x40014400
 80011d8:	40014800 	.word	0x40014800
 80011dc:	fffffcff 	.word	0xfffffcff

080011e0 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80011e0:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80011e2:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80011e4:	6a03      	ldr	r3, [r0, #32]
 80011e6:	4a16      	ldr	r2, [pc, #88]	; (8001240 <TIM_OC3_SetConfig+0x60>)
 80011e8:	4013      	ands	r3, r2
 80011ea:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80011ec:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80011ee:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80011f0:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80011f2:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80011f4:	680d      	ldr	r5, [r1, #0]
 80011f6:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80011f8:	4d12      	ldr	r5, [pc, #72]	; (8001244 <TIM_OC3_SetConfig+0x64>)
 80011fa:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80011fc:	688d      	ldr	r5, [r1, #8]
 80011fe:	022d      	lsls	r5, r5, #8
 8001200:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001202:	4d11      	ldr	r5, [pc, #68]	; (8001248 <TIM_OC3_SetConfig+0x68>)
 8001204:	42a8      	cmp	r0, r5
 8001206:	d10e      	bne.n	8001226 <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001208:	4d10      	ldr	r5, [pc, #64]	; (800124c <TIM_OC3_SetConfig+0x6c>)
 800120a:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800120c:	68cb      	ldr	r3, [r1, #12]
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001212:	4d0f      	ldr	r5, [pc, #60]	; (8001250 <TIM_OC3_SetConfig+0x70>)
 8001214:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001216:	4d0f      	ldr	r5, [pc, #60]	; (8001254 <TIM_OC3_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001218:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800121a:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800121c:	698a      	ldr	r2, [r1, #24]
 800121e:	4332      	orrs	r2, r6
 8001220:	0112      	lsls	r2, r2, #4
 8001222:	432a      	orrs	r2, r5
 8001224:	e005      	b.n	8001232 <TIM_OC3_SetConfig+0x52>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001226:	4d0c      	ldr	r5, [pc, #48]	; (8001258 <TIM_OC3_SetConfig+0x78>)
 8001228:	42a8      	cmp	r0, r5
 800122a:	d0f4      	beq.n	8001216 <TIM_OC3_SetConfig+0x36>
 800122c:	4d0b      	ldr	r5, [pc, #44]	; (800125c <TIM_OC3_SetConfig+0x7c>)
 800122e:	42a8      	cmp	r0, r5
 8001230:	d0f1      	beq.n	8001216 <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001232:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001234:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001236:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001238:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800123a:	6203      	str	r3, [r0, #32]
}
 800123c:	bd70      	pop	{r4, r5, r6, pc}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	fffffeff 	.word	0xfffffeff
 8001244:	fffffdff 	.word	0xfffffdff
 8001248:	40012c00 	.word	0x40012c00
 800124c:	fffff7ff 	.word	0xfffff7ff
 8001250:	fffffbff 	.word	0xfffffbff
 8001254:	ffffcfff 	.word	0xffffcfff
 8001258:	40014400 	.word	0x40014400
 800125c:	40014800 	.word	0x40014800

08001260 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001260:	6a03      	ldr	r3, [r0, #32]
 8001262:	4a12      	ldr	r2, [pc, #72]	; (80012ac <TIM_OC4_SetConfig+0x4c>)
{
 8001264:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001266:	4013      	ands	r3, r2
 8001268:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800126a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800126c:	4c10      	ldr	r4, [pc, #64]	; (80012b0 <TIM_OC4_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 800126e:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8001270:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001272:	4025      	ands	r5, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001274:	680c      	ldr	r4, [r1, #0]
 8001276:	0224      	lsls	r4, r4, #8
 8001278:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800127a:	4c0e      	ldr	r4, [pc, #56]	; (80012b4 <TIM_OC4_SetConfig+0x54>)
 800127c:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800127e:	688c      	ldr	r4, [r1, #8]
 8001280:	0324      	lsls	r4, r4, #12
 8001282:	4322      	orrs	r2, r4

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001284:	4c0c      	ldr	r4, [pc, #48]	; (80012b8 <TIM_OC4_SetConfig+0x58>)
 8001286:	42a0      	cmp	r0, r4
 8001288:	d005      	beq.n	8001296 <TIM_OC4_SetConfig+0x36>
 800128a:	4c0c      	ldr	r4, [pc, #48]	; (80012bc <TIM_OC4_SetConfig+0x5c>)
 800128c:	42a0      	cmp	r0, r4
 800128e:	d002      	beq.n	8001296 <TIM_OC4_SetConfig+0x36>
 8001290:	4c0b      	ldr	r4, [pc, #44]	; (80012c0 <TIM_OC4_SetConfig+0x60>)
 8001292:	42a0      	cmp	r0, r4
 8001294:	d104      	bne.n	80012a0 <TIM_OC4_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001296:	4c0b      	ldr	r4, [pc, #44]	; (80012c4 <TIM_OC4_SetConfig+0x64>)
 8001298:	4023      	ands	r3, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800129a:	694c      	ldr	r4, [r1, #20]
 800129c:	01a4      	lsls	r4, r4, #6
 800129e:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80012a0:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80012a2:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80012a4:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80012a6:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80012a8:	6202      	str	r2, [r0, #32]
}
 80012aa:	bd30      	pop	{r4, r5, pc}
 80012ac:	ffffefff 	.word	0xffffefff
 80012b0:	ffff8cff 	.word	0xffff8cff
 80012b4:	ffffdfff 	.word	0xffffdfff
 80012b8:	40012c00 	.word	0x40012c00
 80012bc:	40014400 	.word	0x40014400
 80012c0:	40014800 	.word	0x40014800
 80012c4:	ffffbfff 	.word	0xffffbfff

080012c8 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80012c8:	2201      	movs	r2, #1
 80012ca:	6803      	ldr	r3, [r0, #0]
 80012cc:	68d9      	ldr	r1, [r3, #12]
}
 80012ce:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80012d0:	4311      	orrs	r1, r2
 80012d2:	60d9      	str	r1, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80012d4:	6819      	ldr	r1, [r3, #0]
 80012d6:	430a      	orrs	r2, r1
 80012d8:	601a      	str	r2, [r3, #0]
}
 80012da:	4770      	bx	lr

080012dc <HAL_TIM_PeriodElapsedCallback>:
 80012dc:	4770      	bx	lr

080012de <HAL_TIM_OC_DelayElapsedCallback>:
 80012de:	4770      	bx	lr

080012e0 <HAL_TIM_IC_CaptureCallback>:
 80012e0:	4770      	bx	lr

080012e2 <HAL_TIM_PWM_PulseFinishedCallback>:
 80012e2:	4770      	bx	lr

080012e4 <HAL_TIM_TriggerCallback>:
 80012e4:	4770      	bx	lr

080012e6 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80012e6:	2202      	movs	r2, #2
 80012e8:	6803      	ldr	r3, [r0, #0]
{
 80012ea:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80012ec:	6919      	ldr	r1, [r3, #16]
{
 80012ee:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80012f0:	4211      	tst	r1, r2
 80012f2:	d00e      	beq.n	8001312 <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80012f4:	68d9      	ldr	r1, [r3, #12]
 80012f6:	4211      	tst	r1, r2
 80012f8:	d00b      	beq.n	8001312 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80012fa:	3a05      	subs	r2, #5
 80012fc:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80012fe:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001300:	3204      	adds	r2, #4
 8001302:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001304:	079b      	lsls	r3, r3, #30
 8001306:	d100      	bne.n	800130a <HAL_TIM_IRQHandler+0x24>
 8001308:	e079      	b.n	80013fe <HAL_TIM_IRQHandler+0x118>
          HAL_TIM_IC_CaptureCallback(htim);
 800130a:	f7ff ffe9 	bl	80012e0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800130e:	2300      	movs	r3, #0
 8001310:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001312:	2204      	movs	r2, #4
 8001314:	6823      	ldr	r3, [r4, #0]
 8001316:	6919      	ldr	r1, [r3, #16]
 8001318:	4211      	tst	r1, r2
 800131a:	d010      	beq.n	800133e <HAL_TIM_IRQHandler+0x58>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800131c:	68d9      	ldr	r1, [r3, #12]
 800131e:	4211      	tst	r1, r2
 8001320:	d00d      	beq.n	800133e <HAL_TIM_IRQHandler+0x58>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001322:	3a09      	subs	r2, #9
 8001324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001326:	3207      	adds	r2, #7
 8001328:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800132a:	699a      	ldr	r2, [r3, #24]
 800132c:	23c0      	movs	r3, #192	; 0xc0
 800132e:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8001330:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001332:	421a      	tst	r2, r3
 8001334:	d069      	beq.n	800140a <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8001336:	f7ff ffd3 	bl	80012e0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800133a:	2300      	movs	r3, #0
 800133c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800133e:	2208      	movs	r2, #8
 8001340:	6823      	ldr	r3, [r4, #0]
 8001342:	6919      	ldr	r1, [r3, #16]
 8001344:	4211      	tst	r1, r2
 8001346:	d00e      	beq.n	8001366 <HAL_TIM_IRQHandler+0x80>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001348:	68d9      	ldr	r1, [r3, #12]
 800134a:	4211      	tst	r1, r2
 800134c:	d00b      	beq.n	8001366 <HAL_TIM_IRQHandler+0x80>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800134e:	3a11      	subs	r2, #17
 8001350:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001352:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001354:	320d      	adds	r2, #13
 8001356:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001358:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800135a:	079b      	lsls	r3, r3, #30
 800135c:	d05b      	beq.n	8001416 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 800135e:	f7ff ffbf 	bl	80012e0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001362:	2300      	movs	r3, #0
 8001364:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001366:	2210      	movs	r2, #16
 8001368:	6823      	ldr	r3, [r4, #0]
 800136a:	6919      	ldr	r1, [r3, #16]
 800136c:	4211      	tst	r1, r2
 800136e:	d010      	beq.n	8001392 <HAL_TIM_IRQHandler+0xac>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001370:	68d9      	ldr	r1, [r3, #12]
 8001372:	4211      	tst	r1, r2
 8001374:	d00d      	beq.n	8001392 <HAL_TIM_IRQHandler+0xac>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001376:	3a21      	subs	r2, #33	; 0x21
 8001378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800137a:	3219      	adds	r2, #25
 800137c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800137e:	69da      	ldr	r2, [r3, #28]
 8001380:	23c0      	movs	r3, #192	; 0xc0
 8001382:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8001384:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001386:	421a      	tst	r2, r3
 8001388:	d04b      	beq.n	8001422 <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 800138a:	f7ff ffa9 	bl	80012e0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800138e:	2300      	movs	r3, #0
 8001390:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001392:	2201      	movs	r2, #1
 8001394:	6823      	ldr	r3, [r4, #0]
 8001396:	6919      	ldr	r1, [r3, #16]
 8001398:	4211      	tst	r1, r2
 800139a:	d007      	beq.n	80013ac <HAL_TIM_IRQHandler+0xc6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800139c:	68d9      	ldr	r1, [r3, #12]
 800139e:	4211      	tst	r1, r2
 80013a0:	d004      	beq.n	80013ac <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80013a2:	3a03      	subs	r2, #3
 80013a4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80013a6:	0020      	movs	r0, r4
 80013a8:	f7ff ff98 	bl	80012dc <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80013ac:	2280      	movs	r2, #128	; 0x80
 80013ae:	6823      	ldr	r3, [r4, #0]
 80013b0:	6919      	ldr	r1, [r3, #16]
 80013b2:	4211      	tst	r1, r2
 80013b4:	d008      	beq.n	80013c8 <HAL_TIM_IRQHandler+0xe2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80013b6:	68d9      	ldr	r1, [r3, #12]
 80013b8:	4211      	tst	r1, r2
 80013ba:	d005      	beq.n	80013c8 <HAL_TIM_IRQHandler+0xe2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80013bc:	3a02      	subs	r2, #2
 80013be:	3aff      	subs	r2, #255	; 0xff
 80013c0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80013c2:	0020      	movs	r0, r4
 80013c4:	f000 fa5e 	bl	8001884 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80013c8:	2240      	movs	r2, #64	; 0x40
 80013ca:	6823      	ldr	r3, [r4, #0]
 80013cc:	6919      	ldr	r1, [r3, #16]
 80013ce:	4211      	tst	r1, r2
 80013d0:	d007      	beq.n	80013e2 <HAL_TIM_IRQHandler+0xfc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80013d2:	68d9      	ldr	r1, [r3, #12]
 80013d4:	4211      	tst	r1, r2
 80013d6:	d004      	beq.n	80013e2 <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80013d8:	3a81      	subs	r2, #129	; 0x81
 80013da:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80013dc:	0020      	movs	r0, r4
 80013de:	f7ff ff81 	bl	80012e4 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80013e2:	2220      	movs	r2, #32
 80013e4:	6823      	ldr	r3, [r4, #0]
 80013e6:	6919      	ldr	r1, [r3, #16]
 80013e8:	4211      	tst	r1, r2
 80013ea:	d007      	beq.n	80013fc <HAL_TIM_IRQHandler+0x116>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80013ec:	68d9      	ldr	r1, [r3, #12]
 80013ee:	4211      	tst	r1, r2
 80013f0:	d004      	beq.n	80013fc <HAL_TIM_IRQHandler+0x116>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80013f2:	3a41      	subs	r2, #65	; 0x41
 80013f4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80013f6:	0020      	movs	r0, r4
 80013f8:	f000 fa43 	bl	8001882 <HAL_TIMEx_CommutationCallback>
}
 80013fc:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80013fe:	f7ff ff6e 	bl	80012de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001402:	0020      	movs	r0, r4
 8001404:	f7ff ff6d 	bl	80012e2 <HAL_TIM_PWM_PulseFinishedCallback>
 8001408:	e781      	b.n	800130e <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800140a:	f7ff ff68 	bl	80012de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800140e:	0020      	movs	r0, r4
 8001410:	f7ff ff67 	bl	80012e2 <HAL_TIM_PWM_PulseFinishedCallback>
 8001414:	e791      	b.n	800133a <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001416:	f7ff ff62 	bl	80012de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800141a:	0020      	movs	r0, r4
 800141c:	f7ff ff61 	bl	80012e2 <HAL_TIM_PWM_PulseFinishedCallback>
 8001420:	e79f      	b.n	8001362 <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001422:	f7ff ff5c 	bl	80012de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001426:	0020      	movs	r0, r4
 8001428:	f7ff ff5b 	bl	80012e2 <HAL_TIM_PWM_PulseFinishedCallback>
 800142c:	e7af      	b.n	800138e <HAL_TIM_IRQHandler+0xa8>
	...

08001430 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001430:	4a1d      	ldr	r2, [pc, #116]	; (80014a8 <TIM_Base_SetConfig+0x78>)
{
 8001432:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8001434:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001436:	4290      	cmp	r0, r2
 8001438:	d006      	beq.n	8001448 <TIM_Base_SetConfig+0x18>
 800143a:	2480      	movs	r4, #128	; 0x80
 800143c:	05e4      	lsls	r4, r4, #23
 800143e:	42a0      	cmp	r0, r4
 8001440:	d002      	beq.n	8001448 <TIM_Base_SetConfig+0x18>
 8001442:	4c1a      	ldr	r4, [pc, #104]	; (80014ac <TIM_Base_SetConfig+0x7c>)
 8001444:	42a0      	cmp	r0, r4
 8001446:	d10c      	bne.n	8001462 <TIM_Base_SetConfig+0x32>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001448:	2470      	movs	r4, #112	; 0x70
 800144a:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 800144c:	684c      	ldr	r4, [r1, #4]
 800144e:	4323      	orrs	r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001450:	4290      	cmp	r0, r2
 8001452:	d00f      	beq.n	8001474 <TIM_Base_SetConfig+0x44>
 8001454:	2480      	movs	r4, #128	; 0x80
 8001456:	05e4      	lsls	r4, r4, #23
 8001458:	42a0      	cmp	r0, r4
 800145a:	d00b      	beq.n	8001474 <TIM_Base_SetConfig+0x44>
 800145c:	4c13      	ldr	r4, [pc, #76]	; (80014ac <TIM_Base_SetConfig+0x7c>)
 800145e:	42a0      	cmp	r0, r4
 8001460:	d008      	beq.n	8001474 <TIM_Base_SetConfig+0x44>
 8001462:	4c13      	ldr	r4, [pc, #76]	; (80014b0 <TIM_Base_SetConfig+0x80>)
 8001464:	42a0      	cmp	r0, r4
 8001466:	d005      	beq.n	8001474 <TIM_Base_SetConfig+0x44>
 8001468:	4c12      	ldr	r4, [pc, #72]	; (80014b4 <TIM_Base_SetConfig+0x84>)
 800146a:	42a0      	cmp	r0, r4
 800146c:	d002      	beq.n	8001474 <TIM_Base_SetConfig+0x44>
 800146e:	4c12      	ldr	r4, [pc, #72]	; (80014b8 <TIM_Base_SetConfig+0x88>)
 8001470:	42a0      	cmp	r0, r4
 8001472:	d103      	bne.n	800147c <TIM_Base_SetConfig+0x4c>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001474:	4c11      	ldr	r4, [pc, #68]	; (80014bc <TIM_Base_SetConfig+0x8c>)
 8001476:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001478:	68cc      	ldr	r4, [r1, #12]
 800147a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800147c:	2480      	movs	r4, #128	; 0x80
 800147e:	43a3      	bics	r3, r4
 8001480:	694c      	ldr	r4, [r1, #20]
 8001482:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8001484:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001486:	688b      	ldr	r3, [r1, #8]
 8001488:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800148a:	680b      	ldr	r3, [r1, #0]
 800148c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800148e:	4290      	cmp	r0, r2
 8001490:	d005      	beq.n	800149e <TIM_Base_SetConfig+0x6e>
 8001492:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <TIM_Base_SetConfig+0x84>)
 8001494:	4298      	cmp	r0, r3
 8001496:	d002      	beq.n	800149e <TIM_Base_SetConfig+0x6e>
 8001498:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <TIM_Base_SetConfig+0x88>)
 800149a:	4298      	cmp	r0, r3
 800149c:	d101      	bne.n	80014a2 <TIM_Base_SetConfig+0x72>
    TIMx->RCR = Structure->RepetitionCounter;
 800149e:	690b      	ldr	r3, [r1, #16]
 80014a0:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80014a2:	2301      	movs	r3, #1
 80014a4:	6143      	str	r3, [r0, #20]
}
 80014a6:	bd10      	pop	{r4, pc}
 80014a8:	40012c00 	.word	0x40012c00
 80014ac:	40000400 	.word	0x40000400
 80014b0:	40002000 	.word	0x40002000
 80014b4:	40014400 	.word	0x40014400
 80014b8:	40014800 	.word	0x40014800
 80014bc:	fffffcff 	.word	0xfffffcff

080014c0 <HAL_TIM_Base_Init>:
{
 80014c0:	b570      	push	{r4, r5, r6, lr}
 80014c2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80014c4:	2001      	movs	r0, #1
  if(htim == NULL)
 80014c6:	2c00      	cmp	r4, #0
 80014c8:	d014      	beq.n	80014f4 <HAL_TIM_Base_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 80014ca:	0025      	movs	r5, r4
 80014cc:	353d      	adds	r5, #61	; 0x3d
 80014ce:	782b      	ldrb	r3, [r5, #0]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d105      	bne.n	80014e2 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80014d6:	0022      	movs	r2, r4
 80014d8:	323c      	adds	r2, #60	; 0x3c
 80014da:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 80014dc:	0020      	movs	r0, r4
 80014de:	f000 fda5 	bl	800202c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80014e2:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014e4:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80014e6:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014e8:	1d21      	adds	r1, r4, #4
 80014ea:	f7ff ffa1 	bl	8001430 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80014ee:	2301      	movs	r3, #1
  return HAL_OK;
 80014f0:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80014f2:	702b      	strb	r3, [r5, #0]
}
 80014f4:	bd70      	pop	{r4, r5, r6, pc}

080014f6 <HAL_TIM_PWM_Init>:
{
 80014f6:	b570      	push	{r4, r5, r6, lr}
 80014f8:	0004      	movs	r4, r0
    return HAL_ERROR;
 80014fa:	2001      	movs	r0, #1
  if(htim == NULL)
 80014fc:	2c00      	cmp	r4, #0
 80014fe:	d014      	beq.n	800152a <HAL_TIM_PWM_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001500:	0025      	movs	r5, r4
 8001502:	353d      	adds	r5, #61	; 0x3d
 8001504:	782b      	ldrb	r3, [r5, #0]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b00      	cmp	r3, #0
 800150a:	d105      	bne.n	8001518 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800150c:	0022      	movs	r2, r4
 800150e:	323c      	adds	r2, #60	; 0x3c
 8001510:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 8001512:	0020      	movs	r0, r4
 8001514:	f000 fda6 	bl	8002064 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001518:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800151a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800151c:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800151e:	1d21      	adds	r1, r4, #4
 8001520:	f7ff ff86 	bl	8001430 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001524:	2301      	movs	r3, #1
  return HAL_OK;
 8001526:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001528:	702b      	strb	r3, [r5, #0]
}
 800152a:	bd70      	pop	{r4, r5, r6, pc}

0800152c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800152c:	2210      	movs	r2, #16
 800152e:	6a03      	ldr	r3, [r0, #32]
{
 8001530:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001532:	4393      	bics	r3, r2
 8001534:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001536:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001538:	4d15      	ldr	r5, [pc, #84]	; (8001590 <TIM_OC2_SetConfig+0x64>)
  tmpcr2 =  TIMx->CR2;
 800153a:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800153c:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800153e:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001540:	680d      	ldr	r5, [r1, #0]
 8001542:	022d      	lsls	r5, r5, #8
 8001544:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC2P;
 8001546:	2520      	movs	r5, #32
 8001548:	43aa      	bics	r2, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800154a:	688d      	ldr	r5, [r1, #8]
 800154c:	012d      	lsls	r5, r5, #4
 800154e:	432a      	orrs	r2, r5
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001550:	4d10      	ldr	r5, [pc, #64]	; (8001594 <TIM_OC2_SetConfig+0x68>)
 8001552:	42a8      	cmp	r0, r5
 8001554:	d10f      	bne.n	8001576 <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8001556:	2580      	movs	r5, #128	; 0x80
 8001558:	43aa      	bics	r2, r5
 800155a:	0015      	movs	r5, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800155c:	68ca      	ldr	r2, [r1, #12]
 800155e:	0112      	lsls	r2, r2, #4
 8001560:	432a      	orrs	r2, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8001562:	2540      	movs	r5, #64	; 0x40
 8001564:	43aa      	bics	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001566:	4d0c      	ldr	r5, [pc, #48]	; (8001598 <TIM_OC2_SetConfig+0x6c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001568:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800156a:	401d      	ands	r5, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800156c:	698b      	ldr	r3, [r1, #24]
 800156e:	4333      	orrs	r3, r6
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	432b      	orrs	r3, r5
 8001574:	e005      	b.n	8001582 <TIM_OC2_SetConfig+0x56>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001576:	4d09      	ldr	r5, [pc, #36]	; (800159c <TIM_OC2_SetConfig+0x70>)
 8001578:	42a8      	cmp	r0, r5
 800157a:	d0f4      	beq.n	8001566 <TIM_OC2_SetConfig+0x3a>
 800157c:	4d08      	ldr	r5, [pc, #32]	; (80015a0 <TIM_OC2_SetConfig+0x74>)
 800157e:	42a8      	cmp	r0, r5
 8001580:	d0f1      	beq.n	8001566 <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 8001582:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8001584:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001586:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001588:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800158a:	6202      	str	r2, [r0, #32]
}
 800158c:	bd70      	pop	{r4, r5, r6, pc}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	ffff8cff 	.word	0xffff8cff
 8001594:	40012c00 	.word	0x40012c00
 8001598:	fffff3ff 	.word	0xfffff3ff
 800159c:	40014400 	.word	0x40014400
 80015a0:	40014800 	.word	0x40014800

080015a4 <HAL_TIM_PWM_ConfigChannel>:
{
 80015a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80015a6:	0006      	movs	r6, r0
 80015a8:	2302      	movs	r3, #2
 80015aa:	363c      	adds	r6, #60	; 0x3c
{
 80015ac:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 80015ae:	7831      	ldrb	r1, [r6, #0]
{
 80015b0:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 80015b2:	0018      	movs	r0, r3
 80015b4:	2901      	cmp	r1, #1
 80015b6:	d025      	beq.n	8001604 <HAL_TIM_PWM_ConfigChannel+0x60>
  htim->State = HAL_TIM_STATE_BUSY;
 80015b8:	0027      	movs	r7, r4
  __HAL_LOCK(htim);
 80015ba:	2101      	movs	r1, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80015bc:	373d      	adds	r7, #61	; 0x3d
  __HAL_LOCK(htim);
 80015be:	7031      	strb	r1, [r6, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80015c0:	703b      	strb	r3, [r7, #0]
  switch (Channel)
 80015c2:	2a0c      	cmp	r2, #12
 80015c4:	d81a      	bhi.n	80015fc <HAL_TIM_PWM_ConfigChannel+0x58>
 80015c6:	0010      	movs	r0, r2
 80015c8:	f7fe fda8 	bl	800011c <__gnu_thumb1_case_uqi>
 80015cc:	18181807 	.word	0x18181807
 80015d0:	1818181d 	.word	0x1818181d
 80015d4:	1818182f 	.word	0x1818182f
 80015d8:	41          	.byte	0x41
 80015d9:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80015da:	0029      	movs	r1, r5
 80015dc:	6820      	ldr	r0, [r4, #0]
 80015de:	f7ff fdc3 	bl	8001168 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80015e2:	2208      	movs	r2, #8
 80015e4:	6823      	ldr	r3, [r4, #0]
 80015e6:	6999      	ldr	r1, [r3, #24]
 80015e8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80015ea:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80015ec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80015ee:	699a      	ldr	r2, [r3, #24]
 80015f0:	438a      	bics	r2, r1
 80015f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80015f4:	699a      	ldr	r2, [r3, #24]
 80015f6:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80015f8:	430a      	orrs	r2, r1
 80015fa:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80015fc:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80015fe:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001600:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(htim);
 8001602:	7030      	strb	r0, [r6, #0]
}
 8001604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001606:	0029      	movs	r1, r5
 8001608:	6820      	ldr	r0, [r4, #0]
 800160a:	f7ff ff8f 	bl	800152c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800160e:	2280      	movs	r2, #128	; 0x80
 8001610:	6823      	ldr	r3, [r4, #0]
 8001612:	0112      	lsls	r2, r2, #4
 8001614:	6999      	ldr	r1, [r3, #24]
 8001616:	430a      	orrs	r2, r1
 8001618:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800161a:	699a      	ldr	r2, [r3, #24]
 800161c:	4915      	ldr	r1, [pc, #84]	; (8001674 <HAL_TIM_PWM_ConfigChannel+0xd0>)
 800161e:	400a      	ands	r2, r1
 8001620:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001622:	692a      	ldr	r2, [r5, #16]
 8001624:	6999      	ldr	r1, [r3, #24]
 8001626:	0212      	lsls	r2, r2, #8
 8001628:	e7e6      	b.n	80015f8 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800162a:	0029      	movs	r1, r5
 800162c:	6820      	ldr	r0, [r4, #0]
 800162e:	f7ff fdd7 	bl	80011e0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001632:	2208      	movs	r2, #8
 8001634:	6823      	ldr	r3, [r4, #0]
 8001636:	69d9      	ldr	r1, [r3, #28]
 8001638:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800163a:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800163c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800163e:	69da      	ldr	r2, [r3, #28]
 8001640:	438a      	bics	r2, r1
 8001642:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001644:	69da      	ldr	r2, [r3, #28]
 8001646:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001648:	430a      	orrs	r2, r1
 800164a:	61da      	str	r2, [r3, #28]
    break;
 800164c:	e7d6      	b.n	80015fc <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800164e:	0029      	movs	r1, r5
 8001650:	6820      	ldr	r0, [r4, #0]
 8001652:	f7ff fe05 	bl	8001260 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001656:	2280      	movs	r2, #128	; 0x80
 8001658:	6823      	ldr	r3, [r4, #0]
 800165a:	0112      	lsls	r2, r2, #4
 800165c:	69d9      	ldr	r1, [r3, #28]
 800165e:	430a      	orrs	r2, r1
 8001660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001662:	69da      	ldr	r2, [r3, #28]
 8001664:	4903      	ldr	r1, [pc, #12]	; (8001674 <HAL_TIM_PWM_ConfigChannel+0xd0>)
 8001666:	400a      	ands	r2, r1
 8001668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800166a:	692a      	ldr	r2, [r5, #16]
 800166c:	69d9      	ldr	r1, [r3, #28]
 800166e:	0212      	lsls	r2, r2, #8
 8001670:	e7ea      	b.n	8001648 <HAL_TIM_PWM_ConfigChannel+0xa4>
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	fffffbff 	.word	0xfffffbff

08001678 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001678:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 800167a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800167c:	4d03      	ldr	r5, [pc, #12]	; (800168c <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800167e:	430a      	orrs	r2, r1
 8001680:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001682:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001684:	4313      	orrs	r3, r2
 8001686:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001688:	6083      	str	r3, [r0, #8]
}
 800168a:	bd30      	pop	{r4, r5, pc}
 800168c:	ffff00ff 	.word	0xffff00ff

08001690 <TIM_SlaveTimer_SetConfig>:
  tmpsmcr &= ~TIM_SMCR_TS;
 8001690:	2270      	movs	r2, #112	; 0x70
{
 8001692:	b570      	push	{r4, r5, r6, lr}
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001694:	2407      	movs	r4, #7
  tmpsmcr = htim->Instance->SMCR;
 8001696:	6800      	ldr	r0, [r0, #0]
 8001698:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800169a:	4393      	bics	r3, r2
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800169c:	684a      	ldr	r2, [r1, #4]
 800169e:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 80016a0:	43a3      	bics	r3, r4
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80016a2:	680c      	ldr	r4, [r1, #0]
 80016a4:	4323      	orrs	r3, r4
  htim->Instance->SMCR = tmpsmcr;
 80016a6:	6083      	str	r3, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 80016a8:	2a50      	cmp	r2, #80	; 0x50
 80016aa:	d01c      	beq.n	80016e6 <TIM_SlaveTimer_SetConfig+0x56>
 80016ac:	d802      	bhi.n	80016b4 <TIM_SlaveTimer_SetConfig+0x24>
 80016ae:	2a40      	cmp	r2, #64	; 0x40
 80016b0:	d00a      	beq.n	80016c8 <TIM_SlaveTimer_SetConfig+0x38>
}
 80016b2:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 80016b4:	2a60      	cmp	r2, #96	; 0x60
 80016b6:	d028      	beq.n	800170a <TIM_SlaveTimer_SetConfig+0x7a>
 80016b8:	2a70      	cmp	r2, #112	; 0x70
 80016ba:	d1fa      	bne.n	80016b2 <TIM_SlaveTimer_SetConfig+0x22>
      TIM_ETR_SetConfig(htim->Instance,
 80016bc:	690b      	ldr	r3, [r1, #16]
 80016be:	688a      	ldr	r2, [r1, #8]
 80016c0:	68c9      	ldr	r1, [r1, #12]
 80016c2:	f7ff ffd9 	bl	8001678 <TIM_ETR_SetConfig>
    break;
 80016c6:	e7f4      	b.n	80016b2 <TIM_SlaveTimer_SetConfig+0x22>
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80016c8:	2201      	movs	r2, #1
      tmpccer = htim->Instance->CCER;
 80016ca:	6a04      	ldr	r4, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80016cc:	6a03      	ldr	r3, [r0, #32]
 80016ce:	4393      	bics	r3, r2
 80016d0:	6203      	str	r3, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80016d2:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80016d4:	32ef      	adds	r2, #239	; 0xef
 80016d6:	4393      	bics	r3, r2
 80016d8:	001a      	movs	r2, r3
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80016da:	690b      	ldr	r3, [r1, #16]
 80016dc:	011b      	lsls	r3, r3, #4
 80016de:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 = tmpccmr1;
 80016e0:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;
 80016e2:	6204      	str	r4, [r0, #32]
    break;
 80016e4:	e7e5      	b.n	80016b2 <TIM_SlaveTimer_SetConfig+0x22>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80016e6:	2501      	movs	r5, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 80016e8:	688a      	ldr	r2, [r1, #8]
 80016ea:	690b      	ldr	r3, [r1, #16]
  tmpccer = TIMx->CCER;
 80016ec:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80016ee:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80016f0:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80016f2:	43ac      	bics	r4, r5
 80016f4:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80016f6:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80016f8:	35ef      	adds	r5, #239	; 0xef
 80016fa:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80016fc:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80016fe:	240a      	movs	r4, #10
 8001700:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8001702:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001704:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001706:	6202      	str	r2, [r0, #32]
 8001708:	e7d3      	b.n	80016b2 <TIM_SlaveTimer_SetConfig+0x22>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800170a:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800170c:	688b      	ldr	r3, [r1, #8]
 800170e:	690a      	ldr	r2, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001710:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001712:	4d07      	ldr	r5, [pc, #28]	; (8001730 <TIM_SlaveTimer_SetConfig+0xa0>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001714:	43a1      	bics	r1, r4
 8001716:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001718:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800171a:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800171c:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800171e:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001720:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8001722:	6a01      	ldr	r1, [r0, #32]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001724:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001726:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8001728:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 800172a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800172c:	6203      	str	r3, [r0, #32]
}
 800172e:	e7c0      	b.n	80016b2 <TIM_SlaveTimer_SetConfig+0x22>
 8001730:	ffff0fff 	.word	0xffff0fff

08001734 <HAL_TIM_SlaveConfigSynchronization>:
{
 8001734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001736:	0005      	movs	r5, r0
 8001738:	353c      	adds	r5, #60	; 0x3c
 800173a:	782b      	ldrb	r3, [r5, #0]
{
 800173c:	0004      	movs	r4, r0
 800173e:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8001740:	2b01      	cmp	r3, #1
 8001742:	d013      	beq.n	800176c <HAL_TIM_SlaveConfigSynchronization+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 8001744:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 8001746:	2701      	movs	r7, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001748:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 800174a:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800174c:	7030      	strb	r0, [r6, #0]
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 800174e:	0020      	movs	r0, r4
 8001750:	f7ff ff9e 	bl	8001690 <TIM_SlaveTimer_SetConfig>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001754:	2140      	movs	r1, #64	; 0x40
  __HAL_UNLOCK(htim);
 8001756:	2000      	movs	r0, #0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001758:	6823      	ldr	r3, [r4, #0]
 800175a:	68da      	ldr	r2, [r3, #12]
 800175c:	438a      	bics	r2, r1
 800175e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001760:	68da      	ldr	r2, [r3, #12]
 8001762:	4903      	ldr	r1, [pc, #12]	; (8001770 <HAL_TIM_SlaveConfigSynchronization+0x3c>)
 8001764:	400a      	ands	r2, r1
 8001766:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 8001768:	7037      	strb	r7, [r6, #0]
  __HAL_UNLOCK(htim);
 800176a:	7028      	strb	r0, [r5, #0]
    }
 800176c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	ffffbfff 	.word	0xffffbfff

08001774 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001774:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001776:	2401      	movs	r4, #1
 8001778:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800177a:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 800177c:	6a03      	ldr	r3, [r0, #32]
 800177e:	43a3      	bics	r3, r4
 8001780:	6203      	str	r3, [r0, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001782:	6a03      	ldr	r3, [r0, #32]
 8001784:	431a      	orrs	r2, r3
 8001786:	6202      	str	r2, [r0, #32]
}
 8001788:	bd10      	pop	{r4, pc}
	...

0800178c <HAL_TIM_PWM_Start>:
{
 800178c:	b510      	push	{r4, lr}
 800178e:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001790:	2201      	movs	r2, #1
 8001792:	6800      	ldr	r0, [r0, #0]
 8001794:	f7ff ffee 	bl	8001774 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001798:	6823      	ldr	r3, [r4, #0]
 800179a:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <HAL_TIM_PWM_Start+0x38>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d005      	beq.n	80017ac <HAL_TIM_PWM_Start+0x20>
 80017a0:	4a09      	ldr	r2, [pc, #36]	; (80017c8 <HAL_TIM_PWM_Start+0x3c>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d002      	beq.n	80017ac <HAL_TIM_PWM_Start+0x20>
 80017a6:	4a09      	ldr	r2, [pc, #36]	; (80017cc <HAL_TIM_PWM_Start+0x40>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d104      	bne.n	80017b6 <HAL_TIM_PWM_Start+0x2a>
    __HAL_TIM_MOE_ENABLE(htim);
 80017ac:	2280      	movs	r2, #128	; 0x80
 80017ae:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80017b0:	0212      	lsls	r2, r2, #8
 80017b2:	430a      	orrs	r2, r1
 80017b4:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80017b6:	2201      	movs	r2, #1
 80017b8:	6819      	ldr	r1, [r3, #0]
}
 80017ba:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 80017bc:	430a      	orrs	r2, r1
 80017be:	601a      	str	r2, [r3, #0]
}
 80017c0:	bd10      	pop	{r4, pc}
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	40012c00 	.word	0x40012c00
 80017c8:	40014400 	.word	0x40014400
 80017cc:	40014800 	.word	0x40014800

080017d0 <HAL_TIM_PWM_Stop>:
{
 80017d0:	b510      	push	{r4, lr}
 80017d2:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80017d4:	2200      	movs	r2, #0
 80017d6:	6800      	ldr	r0, [r0, #0]
 80017d8:	f7ff ffcc 	bl	8001774 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80017dc:	6823      	ldr	r3, [r4, #0]
 80017de:	4a12      	ldr	r2, [pc, #72]	; (8001828 <HAL_TIM_PWM_Stop+0x58>)
 80017e0:	4912      	ldr	r1, [pc, #72]	; (800182c <HAL_TIM_PWM_Stop+0x5c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d005      	beq.n	80017f2 <HAL_TIM_PWM_Stop+0x22>
 80017e6:	4a12      	ldr	r2, [pc, #72]	; (8001830 <HAL_TIM_PWM_Stop+0x60>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d002      	beq.n	80017f2 <HAL_TIM_PWM_Stop+0x22>
 80017ec:	4a11      	ldr	r2, [pc, #68]	; (8001834 <HAL_TIM_PWM_Stop+0x64>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d10a      	bne.n	8001808 <HAL_TIM_PWM_Stop+0x38>
    __HAL_TIM_MOE_DISABLE(htim);
 80017f2:	6a1a      	ldr	r2, [r3, #32]
 80017f4:	420a      	tst	r2, r1
 80017f6:	d107      	bne.n	8001808 <HAL_TIM_PWM_Stop+0x38>
 80017f8:	6a18      	ldr	r0, [r3, #32]
 80017fa:	4a0f      	ldr	r2, [pc, #60]	; (8001838 <HAL_TIM_PWM_Stop+0x68>)
 80017fc:	4210      	tst	r0, r2
 80017fe:	d103      	bne.n	8001808 <HAL_TIM_PWM_Stop+0x38>
 8001800:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001802:	480e      	ldr	r0, [pc, #56]	; (800183c <HAL_TIM_PWM_Stop+0x6c>)
 8001804:	4002      	ands	r2, r0
 8001806:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8001808:	6a1a      	ldr	r2, [r3, #32]
 800180a:	420a      	tst	r2, r1
 800180c:	d107      	bne.n	800181e <HAL_TIM_PWM_Stop+0x4e>
 800180e:	6a19      	ldr	r1, [r3, #32]
 8001810:	4a09      	ldr	r2, [pc, #36]	; (8001838 <HAL_TIM_PWM_Stop+0x68>)
 8001812:	4211      	tst	r1, r2
 8001814:	d103      	bne.n	800181e <HAL_TIM_PWM_Stop+0x4e>
 8001816:	2101      	movs	r1, #1
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	438a      	bics	r2, r1
 800181c:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800181e:	2301      	movs	r3, #1
 8001820:	343d      	adds	r4, #61	; 0x3d
}
 8001822:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001824:	7023      	strb	r3, [r4, #0]
}
 8001826:	bd10      	pop	{r4, pc}
 8001828:	40012c00 	.word	0x40012c00
 800182c:	00001111 	.word	0x00001111
 8001830:	40014400 	.word	0x40014400
 8001834:	40014800 	.word	0x40014800
 8001838:	00000444 	.word	0x00000444
 800183c:	ffff7fff 	.word	0xffff7fff

08001840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001840:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001842:	0004      	movs	r4, r0
 8001844:	343c      	adds	r4, #60	; 0x3c
 8001846:	7822      	ldrb	r2, [r4, #0]
{
 8001848:	0003      	movs	r3, r0
 800184a:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 800184c:	2a01      	cmp	r2, #1
 800184e:	d017      	beq.n	8001880 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8001850:	001d      	movs	r5, r3

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001852:	681b      	ldr	r3, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001854:	353d      	adds	r5, #61	; 0x3d
 8001856:	7028      	strb	r0, [r5, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	306e      	adds	r0, #110	; 0x6e
 800185c:	4382      	bics	r2, r0
 800185e:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	6808      	ldr	r0, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001864:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001866:	4302      	orrs	r2, r0
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001868:	2080      	movs	r0, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800186a:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	4382      	bics	r2, r0
 8001870:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001872:	689a      	ldr	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8001874:	2000      	movs	r0, #0
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001876:	430a      	orrs	r2, r1
 8001878:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 800187a:	2301      	movs	r3, #1
 800187c:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 800187e:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8001880:	bd30      	pop	{r4, r5, pc}

08001882 <HAL_TIMEx_CommutationCallback>:
 8001882:	4770      	bx	lr

08001884 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001884:	4770      	bx	lr
	...

08001888 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001888:	b570      	push	{r4, r5, r6, lr}
 800188a:	0004      	movs	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800188c:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800188e:	69c2      	ldr	r2, [r0, #28]
 8001890:	6883      	ldr	r3, [r0, #8]
 8001892:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001894:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001896:	4303      	orrs	r3, r0
 8001898:	6960      	ldr	r0, [r4, #20]
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800189a:	4e3f      	ldr	r6, [pc, #252]	; (8001998 <UART_SetConfig+0x110>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800189c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800189e:	483f      	ldr	r0, [pc, #252]	; (800199c <UART_SetConfig+0x114>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80018a0:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80018a2:	4001      	ands	r1, r0
 80018a4:	430b      	orrs	r3, r1
 80018a6:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018a8:	686b      	ldr	r3, [r5, #4]
 80018aa:	493d      	ldr	r1, [pc, #244]	; (80019a0 <UART_SetConfig+0x118>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80018ac:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018ae:	400b      	ands	r3, r1
 80018b0:	68e1      	ldr	r1, [r4, #12]
 80018b2:	430b      	orrs	r3, r1
 80018b4:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80018b6:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80018b8:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80018ba:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80018bc:	4839      	ldr	r0, [pc, #228]	; (80019a4 <UART_SetConfig+0x11c>)
 80018be:	4001      	ands	r1, r0
 80018c0:	430b      	orrs	r3, r1
 80018c2:	60ab      	str	r3, [r5, #8]
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	021b      	lsls	r3, r3, #8
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018c8:	42b5      	cmp	r5, r6
 80018ca:	d110      	bne.n	80018ee <UART_SetConfig+0x66>
 80018cc:	2003      	movs	r0, #3
 80018ce:	4936      	ldr	r1, [pc, #216]	; (80019a8 <UART_SetConfig+0x120>)
 80018d0:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80018d2:	4001      	ands	r1, r0
 80018d4:	4835      	ldr	r0, [pc, #212]	; (80019ac <UART_SetConfig+0x124>)
 80018d6:	5c40      	ldrb	r0, [r0, r1]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018d8:	429a      	cmp	r2, r3
 80018da:	d013      	beq.n	8001904 <UART_SetConfig+0x7c>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 80018dc:	2808      	cmp	r0, #8
 80018de:	d858      	bhi.n	8001992 <UART_SetConfig+0x10a>
 80018e0:	f7fe fc1c 	bl	800011c <__gnu_thumb1_case_uqi>
 80018e4:	57425737 	.word	0x57425737
 80018e8:	5757574b 	.word	0x5757574b
 80018ec:	50          	.byte	0x50
 80018ed:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018ee:	4930      	ldr	r1, [pc, #192]	; (80019b0 <UART_SetConfig+0x128>)
 80018f0:	428d      	cmp	r5, r1
 80018f2:	d14c      	bne.n	800198e <UART_SetConfig+0x106>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d12c      	bne.n	8001952 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80018f8:	f7ff fb90 	bl	800101c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80018fc:	6863      	ldr	r3, [r4, #4]
 80018fe:	0040      	lsls	r0, r0, #1
 8001900:	085b      	lsrs	r3, r3, #1
 8001902:	e00b      	b.n	800191c <UART_SetConfig+0x94>
    switch (clocksource)
 8001904:	2808      	cmp	r0, #8
 8001906:	d821      	bhi.n	800194c <UART_SetConfig+0xc4>
 8001908:	f7fe fbfe 	bl	8000108 <__gnu_thumb1_case_sqi>
 800190c:	200520f6 	.word	0x200520f6
 8001910:	20202018 	.word	0x20202018
 8001914:	1b          	.byte	0x1b
 8001915:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001916:	6863      	ldr	r3, [r4, #4]
 8001918:	0858      	lsrs	r0, r3, #1
 800191a:	4b26      	ldr	r3, [pc, #152]	; (80019b4 <UART_SetConfig+0x12c>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800191c:	18c0      	adds	r0, r0, r3
 800191e:	6861      	ldr	r1, [r4, #4]
 8001920:	f7fe fc06 	bl	8000130 <__udivsi3>
 8001924:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8001926:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8001928:	220f      	movs	r2, #15
 800192a:	0019      	movs	r1, r3
 800192c:	4391      	bics	r1, r2
 800192e:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001930:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 8001932:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001934:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8001936:	4313      	orrs	r3, r2
 8001938:	60cb      	str	r3, [r1, #12]
    }
  }

  return ret;

}
 800193a:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800193c:	f7ff fa76 	bl	8000e2c <HAL_RCC_GetSysClockFreq>
 8001940:	e7dc      	b.n	80018fc <UART_SetConfig+0x74>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001942:	6863      	ldr	r3, [r4, #4]
 8001944:	0858      	lsrs	r0, r3, #1
 8001946:	2380      	movs	r3, #128	; 0x80
 8001948:	025b      	lsls	r3, r3, #9
 800194a:	e7e7      	b.n	800191c <UART_SetConfig+0x94>
        ret = HAL_ERROR;
 800194c:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 800194e:	2300      	movs	r3, #0
 8001950:	e7ea      	b.n	8001928 <UART_SetConfig+0xa0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001952:	f7ff fb63 	bl	800101c <HAL_RCC_GetPCLK1Freq>
 8001956:	6861      	ldr	r1, [r4, #4]
 8001958:	084b      	lsrs	r3, r1, #1
 800195a:	1818      	adds	r0, r3, r0
 800195c:	f7fe fbe8 	bl	8000130 <__udivsi3>
 8001960:	b280      	uxth	r0, r0
 8001962:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001964:	2000      	movs	r0, #0
        break;
 8001966:	e7e8      	b.n	800193a <UART_SetConfig+0xb2>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001968:	6861      	ldr	r1, [r4, #4]
 800196a:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <UART_SetConfig+0x130>)
 800196c:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800196e:	18c0      	adds	r0, r0, r3
 8001970:	f7fe fbde 	bl	8000130 <__udivsi3>
 8001974:	b280      	uxth	r0, r0
 8001976:	60f0      	str	r0, [r6, #12]
 8001978:	e7f4      	b.n	8001964 <UART_SetConfig+0xdc>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800197a:	f7ff fa57 	bl	8000e2c <HAL_RCC_GetSysClockFreq>
 800197e:	6861      	ldr	r1, [r4, #4]
 8001980:	084b      	lsrs	r3, r1, #1
 8001982:	e7f4      	b.n	800196e <UART_SetConfig+0xe6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001984:	2380      	movs	r3, #128	; 0x80
 8001986:	6861      	ldr	r1, [r4, #4]
 8001988:	021b      	lsls	r3, r3, #8
 800198a:	0848      	lsrs	r0, r1, #1
 800198c:	e7ef      	b.n	800196e <UART_SetConfig+0xe6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800198e:	429a      	cmp	r2, r3
 8001990:	d0dc      	beq.n	800194c <UART_SetConfig+0xc4>
        ret = HAL_ERROR;
 8001992:	2001      	movs	r0, #1
  return ret;
 8001994:	e7d1      	b.n	800193a <UART_SetConfig+0xb2>
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	40013800 	.word	0x40013800
 800199c:	efff69f3 	.word	0xefff69f3
 80019a0:	ffffcfff 	.word	0xffffcfff
 80019a4:	fffff4ff 	.word	0xfffff4ff
 80019a8:	40021000 	.word	0x40021000
 80019ac:	080022c4 	.word	0x080022c4
 80019b0:	40004400 	.word	0x40004400
 80019b4:	00f42400 	.word	0x00f42400
 80019b8:	007a1200 	.word	0x007a1200

080019bc <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80019bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80019be:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80019c0:	07da      	lsls	r2, r3, #31
 80019c2:	d506      	bpl.n	80019d2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80019c4:	6801      	ldr	r1, [r0, #0]
 80019c6:	4c28      	ldr	r4, [pc, #160]	; (8001a68 <UART_AdvFeatureConfig+0xac>)
 80019c8:	684a      	ldr	r2, [r1, #4]
 80019ca:	4022      	ands	r2, r4
 80019cc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80019ce:	4322      	orrs	r2, r4
 80019d0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80019d2:	079a      	lsls	r2, r3, #30
 80019d4:	d506      	bpl.n	80019e4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80019d6:	6801      	ldr	r1, [r0, #0]
 80019d8:	4c24      	ldr	r4, [pc, #144]	; (8001a6c <UART_AdvFeatureConfig+0xb0>)
 80019da:	684a      	ldr	r2, [r1, #4]
 80019dc:	4022      	ands	r2, r4
 80019de:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80019e0:	4322      	orrs	r2, r4
 80019e2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80019e4:	075a      	lsls	r2, r3, #29
 80019e6:	d506      	bpl.n	80019f6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80019e8:	6801      	ldr	r1, [r0, #0]
 80019ea:	4c21      	ldr	r4, [pc, #132]	; (8001a70 <UART_AdvFeatureConfig+0xb4>)
 80019ec:	684a      	ldr	r2, [r1, #4]
 80019ee:	4022      	ands	r2, r4
 80019f0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80019f2:	4322      	orrs	r2, r4
 80019f4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80019f6:	071a      	lsls	r2, r3, #28
 80019f8:	d506      	bpl.n	8001a08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80019fa:	6801      	ldr	r1, [r0, #0]
 80019fc:	4c1d      	ldr	r4, [pc, #116]	; (8001a74 <UART_AdvFeatureConfig+0xb8>)
 80019fe:	684a      	ldr	r2, [r1, #4]
 8001a00:	4022      	ands	r2, r4
 8001a02:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001a04:	4322      	orrs	r2, r4
 8001a06:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001a08:	06da      	lsls	r2, r3, #27
 8001a0a:	d506      	bpl.n	8001a1a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001a0c:	6801      	ldr	r1, [r0, #0]
 8001a0e:	4c1a      	ldr	r4, [pc, #104]	; (8001a78 <UART_AdvFeatureConfig+0xbc>)
 8001a10:	688a      	ldr	r2, [r1, #8]
 8001a12:	4022      	ands	r2, r4
 8001a14:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001a16:	4322      	orrs	r2, r4
 8001a18:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001a1a:	069a      	lsls	r2, r3, #26
 8001a1c:	d506      	bpl.n	8001a2c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001a1e:	6801      	ldr	r1, [r0, #0]
 8001a20:	4c16      	ldr	r4, [pc, #88]	; (8001a7c <UART_AdvFeatureConfig+0xc0>)
 8001a22:	688a      	ldr	r2, [r1, #8]
 8001a24:	4022      	ands	r2, r4
 8001a26:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001a28:	4322      	orrs	r2, r4
 8001a2a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001a2c:	065a      	lsls	r2, r3, #25
 8001a2e:	d510      	bpl.n	8001a52 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001a30:	6801      	ldr	r1, [r0, #0]
 8001a32:	4d13      	ldr	r5, [pc, #76]	; (8001a80 <UART_AdvFeatureConfig+0xc4>)
 8001a34:	684a      	ldr	r2, [r1, #4]
 8001a36:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001a38:	402a      	ands	r2, r5
 8001a3a:	4322      	orrs	r2, r4
 8001a3c:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001a3e:	2280      	movs	r2, #128	; 0x80
 8001a40:	0352      	lsls	r2, r2, #13
 8001a42:	4294      	cmp	r4, r2
 8001a44:	d105      	bne.n	8001a52 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001a46:	684a      	ldr	r2, [r1, #4]
 8001a48:	4c0e      	ldr	r4, [pc, #56]	; (8001a84 <UART_AdvFeatureConfig+0xc8>)
 8001a4a:	4022      	ands	r2, r4
 8001a4c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001a4e:	4322      	orrs	r2, r4
 8001a50:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001a52:	061b      	lsls	r3, r3, #24
 8001a54:	d506      	bpl.n	8001a64 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001a56:	6802      	ldr	r2, [r0, #0]
 8001a58:	490b      	ldr	r1, [pc, #44]	; (8001a88 <UART_AdvFeatureConfig+0xcc>)
 8001a5a:	6853      	ldr	r3, [r2, #4]
 8001a5c:	400b      	ands	r3, r1
 8001a5e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001a60:	430b      	orrs	r3, r1
 8001a62:	6053      	str	r3, [r2, #4]
  }
}
 8001a64:	bd30      	pop	{r4, r5, pc}
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	fffdffff 	.word	0xfffdffff
 8001a6c:	fffeffff 	.word	0xfffeffff
 8001a70:	fffbffff 	.word	0xfffbffff
 8001a74:	ffff7fff 	.word	0xffff7fff
 8001a78:	ffffefff 	.word	0xffffefff
 8001a7c:	ffffdfff 	.word	0xffffdfff
 8001a80:	ffefffff 	.word	0xffefffff
 8001a84:	ff9fffff 	.word	0xff9fffff
 8001a88:	fff7ffff 	.word	0xfff7ffff

08001a8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a8e:	0004      	movs	r4, r0
 8001a90:	000e      	movs	r6, r1
 8001a92:	0015      	movs	r5, r2
 8001a94:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a96:	6822      	ldr	r2, [r4, #0]
 8001a98:	69d3      	ldr	r3, [r2, #28]
 8001a9a:	4033      	ands	r3, r6
 8001a9c:	1b9b      	subs	r3, r3, r6
 8001a9e:	4259      	negs	r1, r3
 8001aa0:	414b      	adcs	r3, r1
 8001aa2:	42ab      	cmp	r3, r5
 8001aa4:	d001      	beq.n	8001aaa <UART_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	e018      	b.n	8001adc <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8001aaa:	9b06      	ldr	r3, [sp, #24]
 8001aac:	3301      	adds	r3, #1
 8001aae:	d0f3      	beq.n	8001a98 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001ab0:	9b06      	ldr	r3, [sp, #24]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d113      	bne.n	8001ade <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ab6:	6823      	ldr	r3, [r4, #0]
 8001ab8:	490c      	ldr	r1, [pc, #48]	; (8001aec <UART_WaitOnFlagUntilTimeout+0x60>)
 8001aba:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8001abc:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001abe:	400a      	ands	r2, r1
 8001ac0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	31a3      	adds	r1, #163	; 0xa3
 8001ac6:	31ff      	adds	r1, #255	; 0xff
 8001ac8:	438a      	bics	r2, r1
 8001aca:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001acc:	0022      	movs	r2, r4
 8001ace:	2320      	movs	r3, #32
 8001ad0:	3269      	adds	r2, #105	; 0x69
 8001ad2:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 8001ad4:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	3468      	adds	r4, #104	; 0x68
 8001ada:	7023      	strb	r3, [r4, #0]
}
 8001adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001ade:	f7fe fbdd 	bl	800029c <HAL_GetTick>
 8001ae2:	9b06      	ldr	r3, [sp, #24]
 8001ae4:	1bc0      	subs	r0, r0, r7
 8001ae6:	4283      	cmp	r3, r0
 8001ae8:	d2d5      	bcs.n	8001a96 <UART_WaitOnFlagUntilTimeout+0xa>
 8001aea:	e7e4      	b.n	8001ab6 <UART_WaitOnFlagUntilTimeout+0x2a>
 8001aec:	fffffe5f 	.word	0xfffffe5f

08001af0 <UART_CheckIdleState>:
{
 8001af0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001af2:	2600      	movs	r6, #0
{
 8001af4:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001af6:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001af8:	f7fe fbd0 	bl	800029c <HAL_GetTick>
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 8001afc:	4a16      	ldr	r2, [pc, #88]	; (8001b58 <UART_CheckIdleState+0x68>)
 8001afe:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001b00:	0005      	movs	r5, r0
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d008      	beq.n	8001b18 <UART_CheckIdleState+0x28>
  huart->gState  = HAL_UART_STATE_READY;
 8001b06:	0022      	movs	r2, r4
 8001b08:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001b0a:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001b0c:	3269      	adds	r2, #105	; 0x69
  __HAL_UNLOCK(huart);
 8001b0e:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8001b10:	7013      	strb	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8001b12:	7053      	strb	r3, [r2, #1]
  __HAL_UNLOCK(huart);
 8001b14:	7020      	strb	r0, [r4, #0]
}
 8001b16:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	071b      	lsls	r3, r3, #28
 8001b1c:	d40f      	bmi.n	8001b3e <UART_CheckIdleState+0x4e>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001b1e:	6823      	ldr	r3, [r4, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	075b      	lsls	r3, r3, #29
 8001b24:	d5ef      	bpl.n	8001b06 <UART_CheckIdleState+0x16>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001b26:	2180      	movs	r1, #128	; 0x80
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <UART_CheckIdleState+0x6c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	03c9      	lsls	r1, r1, #15
 8001b30:	002b      	movs	r3, r5
 8001b32:	0020      	movs	r0, r4
 8001b34:	f7ff ffaa 	bl	8001a8c <UART_WaitOnFlagUntilTimeout>
 8001b38:	2800      	cmp	r0, #0
 8001b3a:	d10b      	bne.n	8001b54 <UART_CheckIdleState+0x64>
 8001b3c:	e7e3      	b.n	8001b06 <UART_CheckIdleState+0x16>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001b3e:	2180      	movs	r1, #128	; 0x80
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <UART_CheckIdleState+0x6c>)
 8001b42:	0032      	movs	r2, r6
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	0389      	lsls	r1, r1, #14
 8001b48:	0003      	movs	r3, r0
 8001b4a:	0020      	movs	r0, r4
 8001b4c:	f7ff ff9e 	bl	8001a8c <UART_WaitOnFlagUntilTimeout>
 8001b50:	2800      	cmp	r0, #0
 8001b52:	d0e4      	beq.n	8001b1e <UART_CheckIdleState+0x2e>
        return HAL_TIMEOUT;
 8001b54:	2003      	movs	r0, #3
 8001b56:	e7de      	b.n	8001b16 <UART_CheckIdleState+0x26>
 8001b58:	40013800 	.word	0x40013800
 8001b5c:	01ffffff 	.word	0x01ffffff

08001b60 <HAL_UART_Init>:
{
 8001b60:	b570      	push	{r4, r5, r6, lr}
 8001b62:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8001b64:	d101      	bne.n	8001b6a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8001b66:	2001      	movs	r0, #1
}
 8001b68:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 8001b6a:	0005      	movs	r5, r0
 8001b6c:	3569      	adds	r5, #105	; 0x69
 8001b6e:	782b      	ldrb	r3, [r5, #0]
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d104      	bne.n	8001b80 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8001b76:	0002      	movs	r2, r0
 8001b78:	3268      	adds	r2, #104	; 0x68
 8001b7a:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001b7c:	f000 faaa 	bl	80020d4 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001b80:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001b82:	2101      	movs	r1, #1
 8001b84:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001b86:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8001b88:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b8a:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8001b8c:	438b      	bics	r3, r1
 8001b8e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b90:	f7ff fe7a 	bl	8001888 <UART_SetConfig>
 8001b94:	2801      	cmp	r0, #1
 8001b96:	d0e6      	beq.n	8001b66 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d002      	beq.n	8001ba4 <HAL_UART_Init+0x44>
    UART_AdvFeatureConfig(huart);
 8001b9e:	0020      	movs	r0, r4
 8001ba0:	f7ff ff0c 	bl	80019bc <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ba4:	6823      	ldr	r3, [r4, #0]
 8001ba6:	4908      	ldr	r1, [pc, #32]	; (8001bc8 <HAL_UART_Init+0x68>)
 8001ba8:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8001baa:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bac:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bae:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bb0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	438a      	bics	r2, r1
 8001bb6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001bb8:	2201      	movs	r2, #1
 8001bba:	6819      	ldr	r1, [r3, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001bc0:	f7ff ff96 	bl	8001af0 <UART_CheckIdleState>
 8001bc4:	e7d0      	b.n	8001b68 <HAL_UART_Init+0x8>
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	ffffb7ff 	.word	0xffffb7ff

08001bcc <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8001bcc:	2311      	movs	r3, #17
{
 8001bce:	b510      	push	{r4, lr}
 8001bd0:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8001bd2:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001bd4:	3b01      	subs	r3, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bd6:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001bd8:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001bda:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bdc:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bde:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001be0:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001be2:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001be4:	f7fe fef0 	bl	80009c8 <HAL_RCC_OscConfig>
 8001be8:	1e01      	subs	r1, r0, #0
 8001bea:	d000      	beq.n	8001bee <SystemClock_Config+0x22>
 8001bec:	e7fe      	b.n	8001bec <SystemClock_Config+0x20>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bee:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bf0:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bf2:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001bf4:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bf6:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001bf8:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001bfa:	f7ff f95b 	bl	8000eb4 <HAL_RCC_ClockConfig>
 8001bfe:	2800      	cmp	r0, #0
 8001c00:	d000      	beq.n	8001c04 <SystemClock_Config+0x38>
 8001c02:	e7fe      	b.n	8001c02 <SystemClock_Config+0x36>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001c04:	9007      	str	r0, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c06:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c08:	9405      	str	r4, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c0a:	f7ff fa17 	bl	800103c <HAL_RCCEx_PeriphCLKConfig>
 8001c0e:	1e04      	subs	r4, r0, #0
 8001c10:	d000      	beq.n	8001c14 <SystemClock_Config+0x48>
 8001c12:	e7fe      	b.n	8001c12 <SystemClock_Config+0x46>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001c14:	f7ff f9fc 	bl	8001010 <HAL_RCC_GetHCLKFreq>
 8001c18:	21fa      	movs	r1, #250	; 0xfa
 8001c1a:	0089      	lsls	r1, r1, #2
 8001c1c:	f7fe fa88 	bl	8000130 <__udivsi3>
 8001c20:	f7fe fdee 	bl	8000800 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001c24:	2004      	movs	r0, #4
 8001c26:	f7fe fe05 	bl	8000834 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	0022      	movs	r2, r4
 8001c2e:	0021      	movs	r1, r4
 8001c30:	4240      	negs	r0, r0
 8001c32:	f7fe fdab 	bl	800078c <HAL_NVIC_SetPriority>
}
 8001c36:	b018      	add	sp, #96	; 0x60
 8001c38:	bd10      	pop	{r4, pc}

08001c3a <setPWM>:

}

/* USER CODE BEGIN 4 */
void setPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period, uint16_t pulse)
{
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	b530      	push	{r4, r5, lr}
 8001c3e:	b089      	sub	sp, #36	; 0x24
 8001c40:	930f      	str	r3, [sp, #60]	; 0x3c
 8001c42:	2336      	movs	r3, #54	; 0x36
 8001c44:	446b      	add	r3, sp
 8001c46:	8fdd      	ldrh	r5, [r3, #62]	; 0x3e
 8001c48:	900c      	str	r0, [sp, #48]	; 0x30
 8001c4a:	ab1e      	add	r3, sp, #120	; 0x78
 8001c4c:	910d      	str	r1, [sp, #52]	; 0x34
 HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm
 8001c4e:	a80c      	add	r0, sp, #48	; 0x30
 8001c50:	991c      	ldr	r1, [sp, #112]	; 0x70
{
 8001c52:	881c      	ldrh	r4, [r3, #0]
 8001c54:	920e      	str	r2, [sp, #56]	; 0x38
 HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm
 8001c56:	f7ff fdbb 	bl	80017d0 <HAL_TIM_PWM_Stop>
 TIM_OC_InitTypeDef sConfigOC;
 timer.Init.Period = period; // set the period duration
 HAL_TIM_PWM_Init(&timer); // reinititialise with new period value
 8001c5a:	a80c      	add	r0, sp, #48	; 0x30
 timer.Init.Period = period; // set the period duration
 8001c5c:	950f      	str	r5, [sp, #60]	; 0x3c
 HAL_TIM_PWM_Init(&timer); // reinititialise with new period value
 8001c5e:	f7ff fc4a 	bl	80014f6 <HAL_TIM_PWM_Init>
 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c62:	2360      	movs	r3, #96	; 0x60
 8001c64:	9301      	str	r3, [sp, #4]
 sConfigOC.Pulse = pulse; // set the pulse duration
 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c66:	2300      	movs	r3, #0
 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 8001c68:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001c6a:	a901      	add	r1, sp, #4
 8001c6c:	a80c      	add	r0, sp, #48	; 0x30
 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c6e:	9303      	str	r3, [sp, #12]
 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c70:	9305      	str	r3, [sp, #20]
 sConfigOC.Pulse = pulse; // set the pulse duration
 8001c72:	9402      	str	r4, [sp, #8]
 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 8001c74:	f7ff fc96 	bl	80015a4 <HAL_TIM_PWM_ConfigChannel>
 HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 8001c78:	991c      	ldr	r1, [sp, #112]	; 0x70
 8001c7a:	a80c      	add	r0, sp, #48	; 0x30
 8001c7c:	f7ff fd86 	bl	800178c <HAL_TIM_PWM_Start>
}
 8001c80:	b009      	add	sp, #36	; 0x24
 8001c82:	bc30      	pop	{r4, r5}
 8001c84:	bc08      	pop	{r3}
 8001c86:	b004      	add	sp, #16
 8001c88:	4718      	bx	r3
	...

08001c8c <main>:
{
 8001c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c8e:	b09f      	sub	sp, #124	; 0x7c
  HAL_Init();
 8001c90:	f7fe faec 	bl	800026c <HAL_Init>
  SystemClock_Config();
 8001c94:	f7ff ff9a 	bl	8001bcc <SystemClock_Config>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c98:	2080      	movs	r0, #128	; 0x80
 8001c9a:	4bad      	ldr	r3, [pc, #692]	; (8001f50 <main+0x2c4>)
 8001c9c:	02c0      	lsls	r0, r0, #11
 8001c9e:	6959      	ldr	r1, [r3, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca0:	2600      	movs	r6, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca2:	4301      	orrs	r1, r0
 8001ca4:	6159      	str	r1, [r3, #20]
 8001ca6:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca8:	2701      	movs	r7, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001caa:	4002      	ands	r2, r0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cac:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cae:	9212      	str	r2, [sp, #72]	; 0x48
 8001cb0:	9a12      	ldr	r2, [sp, #72]	; 0x48
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cb2:	6959      	ldr	r1, [r3, #20]
 8001cb4:	03c0      	lsls	r0, r0, #15
 8001cb6:	4301      	orrs	r1, r0
 8001cb8:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cba:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cbc:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cbe:	0289      	lsls	r1, r1, #10
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cc0:	4002      	ands	r2, r0
 8001cc2:	9213      	str	r2, [sp, #76]	; 0x4c
 8001cc4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc6:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001cc8:	48a2      	ldr	r0, [pc, #648]	; (8001f54 <main+0x2c8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	615a      	str	r2, [r3, #20]
 8001cce:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001cd0:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd2:	400b      	ands	r3, r1
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001cd4:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd6:	9314      	str	r3, [sp, #80]	; 0x50
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001cd8:	0049      	lsls	r1, r1, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cda:	9b14      	ldr	r3, [sp, #80]	; 0x50
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001cdc:	f7fe fe6e 	bl	80009bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001ce0:	2090      	movs	r0, #144	; 0x90
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	211e      	movs	r1, #30
 8001ce6:	05c0      	lsls	r0, r0, #23
 8001ce8:	f7fe fe68 	bl	80009bc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	ac17      	add	r4, sp, #92	; 0x5c
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	9317      	str	r3, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf4:	0021      	movs	r1, r4
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001cf6:	3bfe      	subs	r3, #254	; 0xfe
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf8:	4896      	ldr	r0, [pc, #600]	; (8001f54 <main+0x2c8>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001cfa:	60a3      	str	r3, [r4, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfc:	6067      	str	r7, [r4, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfe:	60e6      	str	r6, [r4, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d00:	f7fe fdac 	bl	800085c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d04:	2090      	movs	r0, #144	; 0x90
 8001d06:	0021      	movs	r1, r4
 8001d08:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d0a:	9717      	str	r7, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d0c:	6066      	str	r6, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d0e:	60a7      	str	r7, [r4, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d10:	f7fe fda4 	bl	800085c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d14:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001d16:	231e      	movs	r3, #30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d18:	05c0      	lsls	r0, r0, #23
 8001d1a:	0021      	movs	r1, r4
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001d1c:	9317      	str	r3, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1e:	6067      	str	r7, [r4, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	60a6      	str	r6, [r4, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	60e6      	str	r6, [r4, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d24:	f7fe fd9a 	bl	800085c <HAL_GPIO_Init>
  hadc.Instance = ADC1;
 8001d28:	4d8b      	ldr	r5, [pc, #556]	; (8001f58 <main+0x2cc>)
 8001d2a:	4b8c      	ldr	r3, [pc, #560]	; (8001f5c <main+0x2d0>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001d2c:	0028      	movs	r0, r5
  hadc.Instance = ADC1;
 8001d2e:	602b      	str	r3, [r5, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d30:	2304      	movs	r3, #4
 8001d32:	616b      	str	r3, [r5, #20]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d34:	23c2      	movs	r3, #194	; 0xc2
 8001d36:	33ff      	adds	r3, #255	; 0xff
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001d38:	606e      	str	r6, [r5, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001d3a:	60ae      	str	r6, [r5, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d3c:	60ee      	str	r6, [r5, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001d3e:	612f      	str	r7, [r5, #16]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001d40:	61ae      	str	r6, [r5, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001d42:	61ee      	str	r6, [r5, #28]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001d44:	622e      	str	r6, [r5, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001d46:	626e      	str	r6, [r5, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d48:	62ab      	str	r3, [r5, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d4a:	62ee      	str	r6, [r5, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001d4c:	632e      	str	r6, [r5, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d4e:	636f      	str	r7, [r5, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001d50:	f7fe faf6 	bl	8000340 <HAL_ADC_Init>
 8001d54:	42b0      	cmp	r0, r6
 8001d56:	d000      	beq.n	8001d5a <main+0xce>
 8001d58:	e7fe      	b.n	8001d58 <main+0xcc>
  sConfig.Channel = ADC_CHANNEL_5;
 8001d5a:	2305      	movs	r3, #5
 8001d5c:	9317      	str	r3, [sp, #92]	; 0x5c
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	015b      	lsls	r3, r3, #5
 8001d62:	6063      	str	r3, [r4, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001d64:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001d66:	0021      	movs	r1, r4
 8001d68:	0028      	movs	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8001d6a:	60a3      	str	r3, [r4, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001d6c:	f7fe fc8e 	bl	800068c <HAL_ADC_ConfigChannel>
 8001d70:	2800      	cmp	r0, #0
 8001d72:	d000      	beq.n	8001d76 <main+0xea>
 8001d74:	e7fe      	b.n	8001d74 <main+0xe8>
  huart1.Instance = USART1;
 8001d76:	4b7a      	ldr	r3, [pc, #488]	; (8001f60 <main+0x2d4>)
 8001d78:	4a7a      	ldr	r2, [pc, #488]	; (8001f64 <main+0x2d8>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d7a:	270c      	movs	r7, #12
  huart1.Instance = USART1;
 8001d7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001d7e:	2296      	movs	r2, #150	; 0x96
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d80:	6098      	str	r0, [r3, #8]
  huart1.Init.BaudRate = 38400;
 8001d82:	0212      	lsls	r2, r2, #8
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d84:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d86:	6118      	str	r0, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d88:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d8a:	61d8      	str	r0, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d8c:	6218      	str	r0, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d8e:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d90:	0018      	movs	r0, r3
  huart1.Init.BaudRate = 38400;
 8001d92:	605a      	str	r2, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d94:	615f      	str	r7, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d96:	f7ff fee3 	bl	8001b60 <HAL_UART_Init>
 8001d9a:	2800      	cmp	r0, #0
 8001d9c:	d000      	beq.n	8001da0 <main+0x114>
 8001d9e:	e7fe      	b.n	8001d9e <main+0x112>
  htim3.Instance = TIM3;
 8001da0:	4e71      	ldr	r6, [pc, #452]	; (8001f68 <main+0x2dc>)
 8001da2:	4b72      	ldr	r3, [pc, #456]	; (8001f6c <main+0x2e0>)
  htim3.Init.Prescaler = 0;
 8001da4:	6070      	str	r0, [r6, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da6:	60b0      	str	r0, [r6, #8]
  htim3.Init.Period = 0;
 8001da8:	60f0      	str	r0, [r6, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001daa:	6130      	str	r0, [r6, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dac:	61b0      	str	r0, [r6, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001dae:	0030      	movs	r0, r6
  htim3.Instance = TIM3;
 8001db0:	6033      	str	r3, [r6, #0]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001db2:	f7ff fba0 	bl	80014f6 <HAL_TIM_PWM_Init>
 8001db6:	2800      	cmp	r0, #0
 8001db8:	d000      	beq.n	8001dbc <main+0x130>
 8001dba:	e7fe      	b.n	8001dba <main+0x12e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dbc:	9015      	str	r0, [sp, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dbe:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dc0:	a915      	add	r1, sp, #84	; 0x54
 8001dc2:	0030      	movs	r0, r6
 8001dc4:	f7ff fd3c 	bl	8001840 <HAL_TIMEx_MasterConfigSynchronization>
 8001dc8:	1e02      	subs	r2, r0, #0
 8001dca:	d000      	beq.n	8001dce <main+0x142>
 8001dcc:	e7fe      	b.n	8001dcc <main+0x140>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dce:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8001dd0:	6060      	str	r0, [r4, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dd2:	60a0      	str	r0, [r4, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dd4:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dd6:	0021      	movs	r1, r4
 8001dd8:	0030      	movs	r0, r6
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dda:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ddc:	f7ff fbe2 	bl	80015a4 <HAL_TIM_PWM_ConfigChannel>
 8001de0:	2800      	cmp	r0, #0
 8001de2:	d000      	beq.n	8001de6 <main+0x15a>
 8001de4:	e7fe      	b.n	8001de4 <main+0x158>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001de6:	2204      	movs	r2, #4
 8001de8:	0021      	movs	r1, r4
 8001dea:	0030      	movs	r0, r6
 8001dec:	f7ff fbda 	bl	80015a4 <HAL_TIM_PWM_ConfigChannel>
 8001df0:	2800      	cmp	r0, #0
 8001df2:	d000      	beq.n	8001df6 <main+0x16a>
 8001df4:	e7fe      	b.n	8001df4 <main+0x168>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001df6:	003a      	movs	r2, r7
 8001df8:	0021      	movs	r1, r4
 8001dfa:	0030      	movs	r0, r6
 8001dfc:	f7ff fbd2 	bl	80015a4 <HAL_TIM_PWM_ConfigChannel>
 8001e00:	1e07      	subs	r7, r0, #0
 8001e02:	d000      	beq.n	8001e06 <main+0x17a>
 8001e04:	e7fe      	b.n	8001e04 <main+0x178>
  HAL_TIM_MspPostInit(&htim3);
 8001e06:	0030      	movs	r0, r6
 8001e08:	f000 f940 	bl	800208c <HAL_TIM_MspPostInit>
  htim1.Instance = TIM1;
 8001e0c:	4e58      	ldr	r6, [pc, #352]	; (8001f70 <main+0x2e4>)
 8001e0e:	4b59      	ldr	r3, [pc, #356]	; (8001f74 <main+0x2e8>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e10:	0030      	movs	r0, r6
  htim1.Instance = TIM1;
 8001e12:	6033      	str	r3, [r6, #0]
  htim1.Init.Prescaler = 10;
 8001e14:	230a      	movs	r3, #10
 8001e16:	6073      	str	r3, [r6, #4]
  htim1.Init.Period = 10000;
 8001e18:	4b57      	ldr	r3, [pc, #348]	; (8001f78 <main+0x2ec>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e1a:	60b7      	str	r7, [r6, #8]
  htim1.Init.Period = 10000;
 8001e1c:	60f3      	str	r3, [r6, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001e1e:	2380      	movs	r3, #128	; 0x80
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	6133      	str	r3, [r6, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e24:	6177      	str	r7, [r6, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e26:	61b7      	str	r7, [r6, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e28:	f7ff fb4a 	bl	80014c0 <HAL_TIM_Base_Init>
 8001e2c:	2800      	cmp	r0, #0
 8001e2e:	d000      	beq.n	8001e32 <main+0x1a6>
 8001e30:	e7fe      	b.n	8001e30 <main+0x1a4>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001e32:	2306      	movs	r3, #6
  if (HAL_TIM_SlaveConfigSynchronization(&htim1, &sSlaveConfig) != HAL_OK)
 8001e34:	0021      	movs	r1, r4
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001e36:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_SlaveConfigSynchronization(&htim1, &sSlaveConfig) != HAL_OK)
 8001e38:	0030      	movs	r0, r6
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 8001e3a:	332a      	adds	r3, #42	; 0x2a
 8001e3c:	6063      	str	r3, [r4, #4]
  if (HAL_TIM_SlaveConfigSynchronization(&htim1, &sSlaveConfig) != HAL_OK)
 8001e3e:	f7ff fc79 	bl	8001734 <HAL_TIM_SlaveConfigSynchronization>
 8001e42:	2800      	cmp	r0, #0
 8001e44:	d000      	beq.n	8001e48 <main+0x1bc>
 8001e46:	e7fe      	b.n	8001e46 <main+0x1ba>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e48:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e4a:	a915      	add	r1, sp, #84	; 0x54
 8001e4c:	0030      	movs	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e4e:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e50:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e52:	f7ff fcf5 	bl	8001840 <HAL_TIMEx_MasterConfigSynchronization>
 8001e56:	1e07      	subs	r7, r0, #0
 8001e58:	d000      	beq.n	8001e5c <main+0x1d0>
 8001e5a:	e7fe      	b.n	8001e5a <main+0x1ce>
  ENABLE_pin_SET;
 8001e5c:	2180      	movs	r1, #128	; 0x80
 8001e5e:	2201      	movs	r2, #1
 8001e60:	0049      	lsls	r1, r1, #1
 8001e62:	483c      	ldr	r0, [pc, #240]	; (8001f54 <main+0x2c8>)
 8001e64:	f7fe fdaa 	bl	80009bc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001e68:	2090      	movs	r0, #144	; 0x90
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	2102      	movs	r1, #2
 8001e6e:	05c0      	lsls	r0, r0, #23
 8001e70:	f7fe fda4 	bl	80009bc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001e74:	2090      	movs	r0, #144	; 0x90
 8001e76:	003a      	movs	r2, r7
 8001e78:	2104      	movs	r1, #4
 8001e7a:	05c0      	lsls	r0, r0, #23
 8001e7c:	f7fe fd9e 	bl	80009bc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001e80:	2090      	movs	r0, #144	; 0x90
 8001e82:	2108      	movs	r1, #8
 8001e84:	2201      	movs	r2, #1
 8001e86:	05c0      	lsls	r0, r0, #23
 8001e88:	f7fe fd98 	bl	80009bc <HAL_GPIO_WritePin>
 volatile uint16_t adc_val_current = 0, adc_val_prev = 1;
 8001e8c:	224c      	movs	r2, #76	; 0x4c
 8001e8e:	ab02      	add	r3, sp, #8
 8001e90:	189b      	adds	r3, r3, r2
 8001e92:	801f      	strh	r7, [r3, #0]
 8001e94:	2301      	movs	r3, #1
 HAL_TIM_Base_Start_IT(&htim1);
 8001e96:	0030      	movs	r0, r6
 volatile uint16_t adc_val_current = 0, adc_val_prev = 1;
 8001e98:	8023      	strh	r3, [r4, #0]
 HAL_TIM_Base_Start_IT(&htim1);
 8001e9a:	f7ff fa15 	bl	80012c8 <HAL_TIM_Base_Start_IT>
ENABLE_pin_RESET;
 8001e9e:	2180      	movs	r1, #128	; 0x80
 8001ea0:	003a      	movs	r2, r7
 8001ea2:	0049      	lsls	r1, r1, #1
 8001ea4:	482b      	ldr	r0, [pc, #172]	; (8001f54 <main+0x2c8>)
 8001ea6:	f7fe fd89 	bl	80009bc <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == RESET)
 8001eaa:	2090      	movs	r0, #144	; 0x90
 8001eac:	2101      	movs	r1, #1
 8001eae:	05c0      	lsls	r0, r0, #23
 8001eb0:	f7fe fd7e 	bl	80009b0 <HAL_GPIO_ReadPin>
 8001eb4:	1e02      	subs	r2, r0, #0
 8001eb6:	d149      	bne.n	8001f4c <main+0x2c0>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET);
 8001eb8:	2090      	movs	r0, #144	; 0x90
 8001eba:	2110      	movs	r1, #16
 8001ebc:	05c0      	lsls	r0, r0, #23
 8001ebe:	f7fe fd7d 	bl	80009bc <HAL_GPIO_WritePin>
	  while(i--);
 8001ec2:	4e2e      	ldr	r6, [pc, #184]	; (8001f7c <main+0x2f0>)
 8001ec4:	3e01      	subs	r6, #1
 8001ec6:	2e00      	cmp	r6, #0
 8001ec8:	d1fc      	bne.n	8001ec4 <main+0x238>
	if(HAL_ADC_PollForConversion(&hadc,100) == HAL_OK &&
 8001eca:	2164      	movs	r1, #100	; 0x64
 8001ecc:	0028      	movs	r0, r5
 8001ece:	f7fe fb09 	bl	80004e4 <HAL_ADC_PollForConversion>
 8001ed2:	2800      	cmp	r0, #0
 8001ed4:	d1e9      	bne.n	8001eaa <main+0x21e>
			(adc_val_current = HAL_ADC_GetValue(&hadc)) != adc_val_prev){
 8001ed6:	0028      	movs	r0, r5
 8001ed8:	f7fe fb62 	bl	80005a0 <HAL_ADC_GetValue>
 8001edc:	ab15      	add	r3, sp, #84	; 0x54
 8001ede:	b280      	uxth	r0, r0
 8001ee0:	8018      	strh	r0, [r3, #0]
 8001ee2:	9311      	str	r3, [sp, #68]	; 0x44
 8001ee4:	8823      	ldrh	r3, [r4, #0]
	if(HAL_ADC_PollForConversion(&hadc,100) == HAL_OK &&
 8001ee6:	4298      	cmp	r0, r3
 8001ee8:	d0df      	beq.n	8001eaa <main+0x21e>
		ENABLE_pin_SET;
 8001eea:	2180      	movs	r1, #128	; 0x80
 8001eec:	4819      	ldr	r0, [pc, #100]	; (8001f54 <main+0x2c8>)
 8001eee:	0049      	lsls	r1, r1, #1
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f7fe fd63 	bl	80009bc <HAL_GPIO_WritePin>
		pwm_out_val = PWM_RESOLUTION - adc_val_current*2;
 8001ef6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001ef8:	881a      	ldrh	r2, [r3, #0]
		HIN3(pwm_out_val);
 8001efa:	4b1b      	ldr	r3, [pc, #108]	; (8001f68 <main+0x2dc>)
 8001efc:	960c      	str	r6, [sp, #48]	; 0x30
 8001efe:	469c      	mov	ip, r3
		pwm_out_val = PWM_RESOLUTION - adc_val_current*2;
 8001f00:	4b1f      	ldr	r3, [pc, #124]	; (8001f80 <main+0x2f4>)
 8001f02:	1a9b      	subs	r3, r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
		HIN3(pwm_out_val);
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	930e      	str	r3, [sp, #56]	; 0x38
 8001f0a:	4b1e      	ldr	r3, [pc, #120]	; (8001f84 <main+0x2f8>)
 8001f0c:	466a      	mov	r2, sp
 8001f0e:	930d      	str	r3, [sp, #52]	; 0x34
 8001f10:	4663      	mov	r3, ip
 8001f12:	3310      	adds	r3, #16
 8001f14:	cb83      	ldmia	r3!, {r0, r1, r7}
 8001f16:	c283      	stmia	r2!, {r0, r1, r7}
 8001f18:	cb83      	ldmia	r3!, {r0, r1, r7}
 8001f1a:	c283      	stmia	r2!, {r0, r1, r7}
 8001f1c:	cb83      	ldmia	r3!, {r0, r1, r7}
 8001f1e:	c283      	stmia	r2!, {r0, r1, r7}
 8001f20:	cb83      	ldmia	r3!, {r0, r1, r7}
 8001f22:	c283      	stmia	r2!, {r0, r1, r7}
 8001f24:	4663      	mov	r3, ip
 8001f26:	6818      	ldr	r0, [r3, #0]
 8001f28:	6859      	ldr	r1, [r3, #4]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	f7ff fe84 	bl	8001c3a <setPWM>
		ENABLE_pin_RESET;
 8001f32:	2180      	movs	r1, #128	; 0x80
 8001f34:	0032      	movs	r2, r6
 8001f36:	0049      	lsls	r1, r1, #1
 8001f38:	4806      	ldr	r0, [pc, #24]	; (8001f54 <main+0x2c8>)
 8001f3a:	f7fe fd3f 	bl	80009bc <HAL_GPIO_WritePin>
		adc_val_prev = adc_val_current;
 8001f3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	8023      	strh	r3, [r4, #0]
		adc_val_current = 0;
 8001f46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001f48:	801e      	strh	r6, [r3, #0]
 8001f4a:	e7ae      	b.n	8001eaa <main+0x21e>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET);
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	e7b3      	b.n	8001eb8 <main+0x22c>
 8001f50:	40021000 	.word	0x40021000
 8001f54:	48000400 	.word	0x48000400
 8001f58:	20000114 	.word	0x20000114
 8001f5c:	40012400 	.word	0x40012400
 8001f60:	20000064 	.word	0x20000064
 8001f64:	40013800 	.word	0x40013800
 8001f68:	20000024 	.word	0x20000024
 8001f6c:	40000400 	.word	0x40000400
 8001f70:	200000d4 	.word	0x200000d4
 8001f74:	40012c00 	.word	0x40012c00
 8001f78:	00002710 	.word	0x00002710
 8001f7c:	0000c351 	.word	0x0000c351
 8001f80:	00001004 	.word	0x00001004
 8001f84:	00002008 	.word	0x00002008

08001f88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f88:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <HAL_MspInit+0x4c>)
 8001f8e:	6999      	ldr	r1, [r3, #24]
 8001f90:	4301      	orrs	r1, r0
 8001f92:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f94:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f96:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f98:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9a:	4002      	ands	r2, r0
 8001f9c:	9200      	str	r2, [sp, #0]
 8001f9e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fa0:	69da      	ldr	r2, [r3, #28]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001fa2:	3806      	subs	r0, #6
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	61da      	str	r2, [r3, #28]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001fa8:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	400b      	ands	r3, r1
 8001fae:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001fb0:	0011      	movs	r1, r2
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001fb4:	f7fe fbea 	bl	800078c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2002      	movs	r0, #2
 8001fbc:	0011      	movs	r1, r2
 8001fbe:	4240      	negs	r0, r0
 8001fc0:	f7fe fbe4 	bl	800078c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2001      	movs	r0, #1
 8001fc8:	0011      	movs	r1, r2
 8001fca:	4240      	negs	r0, r0
 8001fcc:	f7fe fbde 	bl	800078c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fd0:	bd07      	pop	{r0, r1, r2, pc}
 8001fd2:	46c0      	nop			; (mov r8, r8)
 8001fd4:	40021000 	.word	0x40021000

08001fd8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fd8:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8001fda:	4b12      	ldr	r3, [pc, #72]	; (8002024 <HAL_ADC_MspInit+0x4c>)
 8001fdc:	6802      	ldr	r2, [r0, #0]
{
 8001fde:	b086      	sub	sp, #24
  if(hadc->Instance==ADC1)
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d11c      	bne.n	800201e <HAL_ADC_MspInit+0x46>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fe4:	2080      	movs	r0, #128	; 0x80
 8001fe6:	4a10      	ldr	r2, [pc, #64]	; (8002028 <HAL_ADC_MspInit+0x50>)
 8001fe8:	0080      	lsls	r0, r0, #2
 8001fea:	6991      	ldr	r1, [r2, #24]
    /**ADC GPIO Configuration    
    PA5     ------> ADC_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2400      	movs	r4, #0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fee:	4301      	orrs	r1, r0
 8001ff0:	6191      	str	r1, [r2, #24]
 8001ff2:	6993      	ldr	r3, [r2, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff4:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ff6:	4003      	ands	r3, r0
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffc:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ffe:	2320      	movs	r3, #32
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002000:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002002:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002004:	3b1d      	subs	r3, #29
 8002006:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200a:	f7fe fc27 	bl	800085c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800200e:	200c      	movs	r0, #12
 8002010:	0022      	movs	r2, r4
 8002012:	0021      	movs	r1, r4
 8002014:	f7fe fbba 	bl	800078c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8002018:	200c      	movs	r0, #12
 800201a:	f7fe fbe7 	bl	80007ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800201e:	b006      	add	sp, #24
 8002020:	bd10      	pop	{r4, pc}
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	40012400 	.word	0x40012400
 8002028:	40021000 	.word	0x40021000

0800202c <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800202c:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM1)
 800202e:	4b0b      	ldr	r3, [pc, #44]	; (800205c <HAL_TIM_Base_MspInit+0x30>)
 8002030:	6802      	ldr	r2, [r0, #0]
 8002032:	429a      	cmp	r2, r3
 8002034:	d111      	bne.n	800205a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002036:	2080      	movs	r0, #128	; 0x80
 8002038:	4a09      	ldr	r2, [pc, #36]	; (8002060 <HAL_TIM_Base_MspInit+0x34>)
 800203a:	0100      	lsls	r0, r0, #4
 800203c:	6991      	ldr	r1, [r2, #24]
 800203e:	4301      	orrs	r1, r0
 8002040:	6191      	str	r1, [r2, #24]
 8002042:	6993      	ldr	r3, [r2, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8002044:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002046:	4003      	ands	r3, r0
 8002048:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800204a:	200d      	movs	r0, #13
 800204c:	0011      	movs	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 800204e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8002050:	f7fe fb9c 	bl	800078c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8002054:	200d      	movs	r0, #13
 8002056:	f7fe fbc9 	bl	80007ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800205a:	bd07      	pop	{r0, r1, r2, pc}
 800205c:	40012c00 	.word	0x40012c00
 8002060:	40021000 	.word	0x40021000

08002064 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM3)
 8002064:	4b07      	ldr	r3, [pc, #28]	; (8002084 <HAL_TIM_PWM_MspInit+0x20>)
 8002066:	6802      	ldr	r2, [r0, #0]
{
 8002068:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM3)
 800206a:	429a      	cmp	r2, r3
 800206c:	d108      	bne.n	8002080 <HAL_TIM_PWM_MspInit+0x1c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800206e:	2002      	movs	r0, #2
 8002070:	4a05      	ldr	r2, [pc, #20]	; (8002088 <HAL_TIM_PWM_MspInit+0x24>)
 8002072:	69d1      	ldr	r1, [r2, #28]
 8002074:	4301      	orrs	r1, r0
 8002076:	61d1      	str	r1, [r2, #28]
 8002078:	69d3      	ldr	r3, [r2, #28]
 800207a:	4003      	ands	r3, r0
 800207c:	9301      	str	r3, [sp, #4]
 800207e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002080:	b002      	add	sp, #8
 8002082:	4770      	bx	lr
 8002084:	40000400 	.word	0x40000400
 8002088:	40021000 	.word	0x40021000

0800208c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800208c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM3)
 800208e:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <HAL_TIM_MspPostInit+0x40>)
 8002090:	6802      	ldr	r2, [r0, #0]
{
 8002092:	b086      	sub	sp, #24
  if(htim->Instance==TIM3)
 8002094:	429a      	cmp	r2, r3
 8002096:	d116      	bne.n	80020c6 <HAL_TIM_MspPostInit+0x3a>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002098:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209a:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800209c:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209e:	2600      	movs	r6, #0
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80020a0:	2501      	movs	r5, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a2:	a901      	add	r1, sp, #4
 80020a4:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020a6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a8:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80020aa:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ac:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80020ae:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b0:	f7fe fbd4 	bl	800085c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b4:	a901      	add	r1, sp, #4
 80020b6:	4806      	ldr	r0, [pc, #24]	; (80020d0 <HAL_TIM_MspPostInit+0x44>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80020b8:	9401      	str	r4, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ba:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80020bc:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020be:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80020c0:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c2:	f7fe fbcb 	bl	800085c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80020c6:	b006      	add	sp, #24
 80020c8:	bd70      	pop	{r4, r5, r6, pc}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	40000400 	.word	0x40000400
 80020d0:	48000400 	.word	0x48000400

080020d4 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80020d6:	4b10      	ldr	r3, [pc, #64]	; (8002118 <HAL_UART_MspInit+0x44>)
 80020d8:	6802      	ldr	r2, [r0, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d119      	bne.n	8002112 <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020de:	2080      	movs	r0, #128	; 0x80
 80020e0:	4a0e      	ldr	r2, [pc, #56]	; (800211c <HAL_UART_MspInit+0x48>)
 80020e2:	01c0      	lsls	r0, r0, #7
 80020e4:	6991      	ldr	r1, [r2, #24]
 80020e6:	4301      	orrs	r1, r0
 80020e8:	6191      	str	r1, [r2, #24]
 80020ea:	6993      	ldr	r3, [r2, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ec:	a901      	add	r1, sp, #4
    __HAL_RCC_USART1_CLK_ENABLE();
 80020ee:	4003      	ands	r3, r0
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020f4:	23c0      	movs	r3, #192	; 0xc0
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fa:	2302      	movs	r3, #2
 80020fc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002100:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002104:	3303      	adds	r3, #3
 8002106:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002108:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800210a:	3b02      	subs	r3, #2
 800210c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210e:	f7fe fba5 	bl	800085c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002112:	b007      	add	sp, #28
 8002114:	bd00      	pop	{pc}
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	40013800 	.word	0x40013800
 800211c:	40021000 	.word	0x40021000

08002120 <NMI_Handler>:
 8002120:	4770      	bx	lr

08002122 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002122:	e7fe      	b.n	8002122 <HardFault_Handler>

08002124 <SVC_Handler>:
 8002124:	4770      	bx	lr

08002126 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002126:	4770      	bx	lr

08002128 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002128:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800212a:	f7fe f8af 	bl	800028c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800212e:	f7fe fb90 	bl	8000852 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002132:	bd10      	pop	{r4, pc}

08002134 <ADC1_IRQHandler>:

/**
* @brief This function handles ADC interrupt.
*/
void ADC1_IRQHandler(void)
{
 8002134:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8002136:	4802      	ldr	r0, [pc, #8]	; (8002140 <ADC1_IRQHandler+0xc>)
 8002138:	f7fe fa38 	bl	80005ac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800213c:	bd10      	pop	{r4, pc}
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	20000114 	.word	0x20000114

08002144 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
* @brief This function handles TIM1 break, update, trigger and commutation interrupts.
*/
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8002144:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

	HAL_ADC_Start(&hadc);
 8002146:	4803      	ldr	r0, [pc, #12]	; (8002154 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x10>)
 8002148:	f7fe f9a0 	bl	800048c <HAL_ADC_Start>
  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800214c:	4802      	ldr	r0, [pc, #8]	; (8002158 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800214e:	f7ff f8ca 	bl	80012e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8002152:	bd10      	pop	{r4, pc}
 8002154:	20000114 	.word	0x20000114
 8002158:	200000d4 	.word	0x200000d4

0800215c <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 800215c:	2101      	movs	r1, #1
 800215e:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002160:	4811      	ldr	r0, [pc, #68]	; (80021a8 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	4002      	ands	r2, r0
 800216c:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	480e      	ldr	r0, [pc, #56]	; (80021ac <SystemInit+0x50>)
 8002172:	4002      	ands	r2, r0
 8002174:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	480d      	ldr	r0, [pc, #52]	; (80021b0 <SystemInit+0x54>)
 800217a:	4002      	ands	r2, r0
 800217c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	480c      	ldr	r0, [pc, #48]	; (80021b4 <SystemInit+0x58>)
 8002182:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002184:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002186:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800218a:	4382      	bics	r2, r0
 800218c:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
#elif defined (STM32F042x6) || defined (STM32F048xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFE2CU;
 800218e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002190:	4809      	ldr	r0, [pc, #36]	; (80021b8 <SystemInit+0x5c>)
 8002192:	4002      	ands	r2, r0
 8002194:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8002196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002198:	438a      	bics	r2, r1
 800219a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800219c:	2200      	movs	r2, #0
 800219e:	609a      	str	r2, [r3, #8]

}
 80021a0:	4770      	bx	lr
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	40021000 	.word	0x40021000
 80021a8:	08ffb80c 	.word	0x08ffb80c
 80021ac:	fef6ffff 	.word	0xfef6ffff
 80021b0:	fffbffff 	.word	0xfffbffff
 80021b4:	ffc0ffff 	.word	0xffc0ffff
 80021b8:	fffffe2c 	.word	0xfffffe2c

080021bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021bc:	4813      	ldr	r0, [pc, #76]	; (800220c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021be:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80021c0:	2004      	movs	r0, #4
    LDR R1, [R0]
 80021c2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80021c4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80021c6:	221f      	movs	r2, #31
    CMP R1, R2
 80021c8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80021ca:	d105      	bne.n	80021d8 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80021cc:	4810      	ldr	r0, [pc, #64]	; (8002210 <LoopForever+0x6>)
    LDR R1,=0x00000001
 80021ce:	2101      	movs	r1, #1
    STR R1, [R0]
 80021d0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80021d2:	4810      	ldr	r0, [pc, #64]	; (8002214 <LoopForever+0xa>)
    LDR R1,=0x00000000
 80021d4:	2100      	movs	r1, #0
    STR R1, [R0]
 80021d6:	6001      	str	r1, [r0, #0]

080021d8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021d8:	480f      	ldr	r0, [pc, #60]	; (8002218 <LoopForever+0xe>)
  ldr r1, =_edata
 80021da:	4910      	ldr	r1, [pc, #64]	; (800221c <LoopForever+0x12>)
  ldr r2, =_sidata
 80021dc:	4a10      	ldr	r2, [pc, #64]	; (8002220 <LoopForever+0x16>)
  movs r3, #0
 80021de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021e0:	e002      	b.n	80021e8 <LoopCopyDataInit>

080021e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021e6:	3304      	adds	r3, #4

080021e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021ec:	d3f9      	bcc.n	80021e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ee:	4a0d      	ldr	r2, [pc, #52]	; (8002224 <LoopForever+0x1a>)
  ldr r4, =_ebss
 80021f0:	4c0d      	ldr	r4, [pc, #52]	; (8002228 <LoopForever+0x1e>)
  movs r3, #0
 80021f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021f4:	e001      	b.n	80021fa <LoopFillZerobss>

080021f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021f8:	3204      	adds	r2, #4

080021fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021fc:	d3fb      	bcc.n	80021f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80021fe:	f7ff ffad 	bl	800215c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002202:	f000 f815 	bl	8002230 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002206:	f7ff fd41 	bl	8001c8c <main>

0800220a <LoopForever>:

LoopForever:
    b LoopForever
 800220a:	e7fe      	b.n	800220a <LoopForever>
  ldr   r0, =_estack
 800220c:	20001000 	.word	0x20001000
    LDR R0,=0x40021018
 8002210:	40021018 	.word	0x40021018
    LDR R0,=0x40010000
 8002214:	40010000 	.word	0x40010000
  ldr r0, =_sdata
 8002218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800221c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8002220:	080022e8 	.word	0x080022e8
  ldr r2, =_sbss
 8002224:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8002228:	20000160 	.word	0x20000160

0800222c <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800222c:	e7fe      	b.n	800222c <CEC_CAN_IRQHandler>
	...

08002230 <__libc_init_array>:
 8002230:	b570      	push	{r4, r5, r6, lr}
 8002232:	2600      	movs	r6, #0
 8002234:	4d0c      	ldr	r5, [pc, #48]	; (8002268 <__libc_init_array+0x38>)
 8002236:	4c0d      	ldr	r4, [pc, #52]	; (800226c <__libc_init_array+0x3c>)
 8002238:	1b64      	subs	r4, r4, r5
 800223a:	10a4      	asrs	r4, r4, #2
 800223c:	42a6      	cmp	r6, r4
 800223e:	d109      	bne.n	8002254 <__libc_init_array+0x24>
 8002240:	2600      	movs	r6, #0
 8002242:	f000 f823 	bl	800228c <_init>
 8002246:	4d0a      	ldr	r5, [pc, #40]	; (8002270 <__libc_init_array+0x40>)
 8002248:	4c0a      	ldr	r4, [pc, #40]	; (8002274 <__libc_init_array+0x44>)
 800224a:	1b64      	subs	r4, r4, r5
 800224c:	10a4      	asrs	r4, r4, #2
 800224e:	42a6      	cmp	r6, r4
 8002250:	d105      	bne.n	800225e <__libc_init_array+0x2e>
 8002252:	bd70      	pop	{r4, r5, r6, pc}
 8002254:	00b3      	lsls	r3, r6, #2
 8002256:	58eb      	ldr	r3, [r5, r3]
 8002258:	4798      	blx	r3
 800225a:	3601      	adds	r6, #1
 800225c:	e7ee      	b.n	800223c <__libc_init_array+0xc>
 800225e:	00b3      	lsls	r3, r6, #2
 8002260:	58eb      	ldr	r3, [r5, r3]
 8002262:	4798      	blx	r3
 8002264:	3601      	adds	r6, #1
 8002266:	e7f2      	b.n	800224e <__libc_init_array+0x1e>
 8002268:	080022e0 	.word	0x080022e0
 800226c:	080022e0 	.word	0x080022e0
 8002270:	080022e0 	.word	0x080022e0
 8002274:	080022e4 	.word	0x080022e4

08002278 <memcpy>:
 8002278:	2300      	movs	r3, #0
 800227a:	b510      	push	{r4, lr}
 800227c:	429a      	cmp	r2, r3
 800227e:	d100      	bne.n	8002282 <memcpy+0xa>
 8002280:	bd10      	pop	{r4, pc}
 8002282:	5ccc      	ldrb	r4, [r1, r3]
 8002284:	54c4      	strb	r4, [r0, r3]
 8002286:	3301      	adds	r3, #1
 8002288:	e7f8      	b.n	800227c <memcpy+0x4>
	...

0800228c <_init>:
 800228c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002292:	bc08      	pop	{r3}
 8002294:	469e      	mov	lr, r3
 8002296:	4770      	bx	lr

08002298 <_fini>:
 8002298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800229e:	bc08      	pop	{r3}
 80022a0:	469e      	mov	lr, r3
 80022a2:	4770      	bx	lr
